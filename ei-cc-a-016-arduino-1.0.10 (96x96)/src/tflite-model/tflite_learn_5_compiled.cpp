/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.10.2023 17:54:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242560;
#else
constexpr int kTensorArenaSize = 241536;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 37392, -35964, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 5.8642057410907e-05, 6.1089624068699777e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 77,-38,-49,111,-89,14,-56,80,127,-38,-42,-18,-12,89,-49,37,125,-77,-47,-102,110,95,86,-65,-70,-98,-48,82,1,-109,-16,68, 
  /* [1][0][][] */ 66,86,84,-69,-82,86,-9,17,-41,-13,45,121,127,50,46,-1,-43,3,-66,-100,-85,44,40,124,97,86,-53,-5,120,-114,-120,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0031157906632870436, 0.0032458356581628323, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 532, 487, 498, -395, -381, 495, -439, 490, -454, -445, 495, 532, 501, 502, 500, -452, -524, -272, -334, -337, -427, 503, 466, 543, 526, 521, -410, -410, 536, -452, -229, -429, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.3143111068056896e-05, 3.344895230839029e-05, 3.2754327548900619e-05, 3.2625204767100513e-05, 3.2310086680809036e-05, 3.3046944736270234e-05, 3.2559582905378193e-05, 3.3223695936612785e-05, 3.3076012186938897e-05, 3.2965384889394045e-05, 3.3614447602303699e-05, 3.3417305530747399e-05, 3.3218282624147832e-05, 3.3388991141691804e-05, 3.336915688123554e-05, 3.2910091249505058e-05, 3.082550028921105e-05, 3.2259275030810386e-05, 3.2512005418539047e-05, 3.145652954117395e-05, 3.2246014598058537e-05, 3.3061136491596699e-05, 3.2366719096899033e-05, 3.2529304007766768e-05, 3.3703090593917295e-05, 3.3279393392149359e-05, 3.2930693123489618e-05, 3.2368294341722503e-05, 3.1456776923732832e-05, 3.2064985134638846e-05, 3.1521547498414293e-05, 3.3224961953237653e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-42,114,18,105,-5,-80,-93,66,-91,-101,8,65,18,-28,62,-47,-24,-58,-47,-62,-96,12,118,-108,17,86,-40,119,6,-12,-74,93,-54,-85,74,-104,-72,-84,36,84,-78,-90,109,60,-102,118,-11,25,-49,-25,105,-67,-41,-87,116,34,76,127,-103,-69,92,-43,56,0,24,80,103,62,107,94,-109,110,-92,50,94,-100,22,-53,40,62,29,102,2,-53,-34,-79,111,37,125,-1,-106,22,75,37,29, 
  /* [1][0][][] */ -49,42,-62,7,-30,89,46,17,87,-93,-97,114,73,-18,33,74,118,-33,45,127,-40,3,44,36,43,26,-33,115,19,13,108,-57,69,113,-1,38,60,70,-6,-57,-54,15,-15,-89,-26,44,-22,-46,-16,-77,123,66,19,92,-70,-41,37,108,68,90,-51,124,-58,-71,-50,43,85,50,113,37,26,18,-105,101,-41,56,90,-37,-34,82,-72,95,-44,-108,36,124,-61,-60,87,88,102,34,93,98,36,4, 
  /* [2][0][][] */ 56,46,-53,105,-13,-52,99,104,-95,97,-29,127,100,-7,93,-106,-50,-19,44,64,-91,-6,121,30,-18,90,114,17,-62,89,90,104,-61,-12,-86,-100,-81,105,116,-20,-111,-69,21,2,-77,127,-17,-71,109,47,100,-83,-39,73,31,27,-61,105,-58,12,-10,69,-28,80,102,55,58,98,-88,77,17,-65,43,-67,41,38,-48,-17,13,18,47,-87,-2,-33,8,-92,-12,-26,99,122,-16,15,-36,-78,-39,-60, 
  /* [3][0][][] */ 71,-5,35,-28,-77,48,-120,36,49,18,63,1,91,94,70,2,102,96,-63,9,113,-95,-72,-122,-29,-120,-88,105,41,-107,85,4,-62,-41,-22,-20,-99,-30,37,46,-30,-99,-105,-4,71,25,-54,-91,66,-91,39,-3,93,25,88,-107,-126,-125,-125,-65,-104,33,-44,71,53,-39,-68,-37,-38,-77,-1,99,17,-112,52,-56,28,95,94,-69,-97,-127,32,90,26,42,-49,-125,-90,41,-6,-115,91,-102,-99,38, 
  /* [4][0][][] */ 49,100,-5,50,-33,-30,27,12,59,88,-13,50,24,-43,-17,-73,-31,-10,-71,9,105,-99,84,22,-25,-9,60,-66,-56,31,-74,-59,66,113,10,-110,-56,-11,-121,45,-55,-69,-81,-97,30,104,31,52,18,-49,-23,-82,-97,41,-93,16,31,-102,23,10,2,-81,-45,-74,-53,52,-4,-43,23,-108,-105,-91,-61,19,99,50,58,-30,-13,-64,1,-51,-107,-26,-4,66,89,-3,-127,-82,41,41,26,97,-106,-23, 
  /* [5][0][][] */ 106,-84,87,92,49,-108,35,64,112,-108,5,-61,31,108,44,44,70,69,-65,107,39,60,25,-19,-98,-56,-9,-85,57,38,24,-92,-30,10,-62,26,-109,-28,54,30,-82,-44,48,105,-26,30,43,-45,-101,113,33,38,47,24,43,-14,117,57,-48,-34,39,-60,45,-64,-24,109,-19,37,83,10,111,-63,-41,86,-21,-64,16,-41,19,92,115,52,36,117,-75,89,2,44,76,-94,127,98,-9,32,81,-75, 
  /* [6][0][][] */ 14,-50,110,73,-91,-70,-7,63,-17,-88,3,-94,84,52,113,-125,37,-1,-4,100,-83,-125,108,56,-65,-88,-13,-63,-33,-121,43,-83,-96,-127,-50,-112,-12,36,-115,79,84,53,20,-20,-119,104,-94,-50,-86,14,-32,-71,56,-58,92,-32,4,-11,-72,112,-101,-3,65,-78,-57,63,98,-54,76,-10,-111,-9,54,-75,-96,-47,-86,-98,-62,-33,30,-34,41,-31,-77,-92,-44,-100,82,92,93,13,-58,-70,74,-33, 
  /* [7][0][][] */ 127,78,-29,-34,-63,124,-11,8,125,14,-89,24,65,-80,56,83,62,25,8,124,63,44,3,95,-61,112,50,65,-69,116,-10,45,34,34,76,110,-98,97,-1,-20,104,-69,94,77,59,5,113,-104,61,-48,-102,-61,-17,95,26,39,126,-82,12,-50,15,3,88,-104,-61,-47,77,32,-100,30,75,94,94,35,68,69,-57,64,-92,55,101,-26,-9,-65,96,42,-102,101,90,14,97,74,-46,-34,6,-56, 
  /* [8][0][][] */ 5,26,-53,-100,51,18,-84,-29,2,29,37,88,-5,-53,-94,-80,-78,88,-73,9,23,-33,75,103,-125,85,37,69,-77,12,-100,110,86,-41,39,-11,110,-5,-27,63,73,95,-119,-127,-19,-36,-32,102,13,-102,-73,-10,-73,-16,-41,-118,40,100,-102,98,106,35,35,101,-41,-55,-30,92,-94,43,25,-10,69,62,1,14,-55,98,76,68,27,73,-122,-95,18,34,67,-48,30,-45,-93,93,-90,-108,-55,55, 
  /* [9][0][][] */ -5,2,108,39,75,-117,-57,-127,40,43,-16,46,-34,-87,-110,-33,1,-6,-108,-78,-1,94,-115,-113,113,-16,-18,20,-19,-68,-98,94,55,-7,21,-27,-82,8,-43,-51,41,-77,48,-101,75,17,-113,49,45,-20,-91,-57,68,-82,-79,98,80,-67,-20,-10,-95,99,79,-85,-95,-2,99,40,-48,95,105,-99,0,74,-114,-105,-84,-119,-45,101,26,18,97,22,-52,-101,30,-17,95,28,-38,103,104,-5,57,-44, 
  /* [10][0][][] */ -53,90,101,-57,-7,113,116,36,44,40,31,-59,108,90,-25,20,-26,88,-89,-53,-11,38,65,-60,39,63,-108,-104,-40,87,-85,-73,94,108,127,83,-33,15,-25,42,-27,124,-103,-30,-88,-50,6,-51,6,10,46,18,70,29,-55,-26,-92,-7,36,-38,4,88,119,50,125,-67,-88,-13,30,-12,-86,-59,94,74,-74,117,-8,73,74,30,86,10,64,112,-93,76,108,-19,43,16,4,-60,-43,-42,-37,-57, 
  /* [11][0][][] */ 120,21,-5,113,127,54,63,40,119,102,-68,121,3,-75,38,-57,-47,-93,73,50,41,85,33,-100,-97,-86,-11,79,89,2,35,-11,-78,-63,62,56,-54,85,-20,-50,-17,113,-66,14,-32,-50,-81,-80,85,114,120,59,-84,-82,27,35,-59,-47,-20,-80,-71,97,93,19,38,96,-47,39,97,67,-75,-63,50,114,-91,61,-59,43,-36,98,-97,-15,-62,-34,54,-71,23,-17,-85,2,20,-92,-76,-24,-61,-29, 
  /* [12][0][][] */ 22,77,-46,10,97,17,-26,44,-70,69,-6,24,-36,22,58,-71,-90,-24,-39,-72,36,-1,26,107,-59,-40,110,-91,103,22,-27,125,-77,-61,-37,25,5,-66,-9,51,125,49,-103,-32,-12,-75,-30,126,-37,-107,-68,113,46,9,-73,95,-10,-50,61,75,67,123,4,64,121,42,-36,127,66,111,50,81,93,125,-8,4,-28,45,-108,-85,-49,114,56,24,-28,41,62,123,-85,-101,102,52,112,-7,37,85, 
  /* [13][0][][] */ 120,-51,112,106,103,124,90,73,80,-94,20,-19,100,81,76,-39,-108,-62,-61,38,77,-18,127,-38,-56,49,15,28,-78,-80,92,46,50,113,-11,47,-76,-20,34,77,-55,87,-45,21,-34,37,7,-21,43,111,-26,-97,-90,38,110,-72,-38,37,-13,-67,-19,127,-68,23,-44,-54,-83,96,-28,-3,105,7,-82,47,-67,-32,-98,76,90,-53,61,-86,105,30,-74,-93,102,125,-2,-44,-65,63,123,-44,76,4, 
  /* [14][0][][] */ -47,-90,98,80,88,-18,-6,-106,-82,-27,77,92,-21,-72,-81,-78,-42,-52,23,34,-38,43,6,71,-115,-62,-25,40,-104,-109,-68,48,115,-13,-24,16,104,127,43,-103,4,-102,43,98,77,-109,76,-78,123,50,87,61,107,-8,-6,24,-40,17,54,104,-11,-72,-18,82,-83,-2,88,-98,-80,-81,-85,103,13,92,58,-63,62,-104,63,42,55,-11,-110,-30,-108,-83,-106,110,118,14,100,-44,95,107,-9,72, 
  /* [15][0][][] */ 11,-31,-34,68,88,-95,56,-103,59,-9,-76,4,103,-3,-97,-118,84,5,-100,18,44,14,69,104,77,63,34,89,15,52,61,-108,-1,2,-70,-11,-72,108,106,-74,11,108,-54,-29,20,-83,-50,-86,-12,-88,-10,26,-106,-108,-57,-14,63,48,-52,107,-50,-72,-5,98,-42,93,-78,-2,-66,-1,59,-80,13,-19,54,-114,-7,49,103,75,-89,53,-115,-70,-127,-41,-98,36,81,67,-119,-47,49,108,-114,109, 
  /* [16][0][][] */ -83,-7,103,-74,37,114,-67,36,49,44,-123,69,-22,-60,-65,-72,108,78,68,62,113,77,-49,49,-43,51,-81,62,-117,8,35,6,-122,75,53,55,-44,50,-61,-82,16,-58,72,91,60,104,102,-21,-69,-127,-2,113,-52,118,64,41,20,89,68,8,119,110,29,59,52,7,-48,92,40,99,-41,-18,25,92,60,86,-18,98,-125,-21,7,-98,55,5,5,101,104,6,77,8,-23,114,67,-41,-98,20, 
  /* [17][0][][] */ 36,-121,28,85,-44,-113,-67,-105,35,-90,81,54,102,59,-123,45,35,54,105,116,-106,-18,8,-56,17,71,-87,23,110,-61,-32,81,-36,-24,32,8,-58,101,-99,-31,-98,-42,-21,-15,4,4,87,-122,88,111,-17,21,-24,76,103,-78,-124,91,-96,-124,25,-96,72,104,-91,-79,45,-106,-113,-2,105,27,15,-127,-73,65,112,-56,36,-70,8,-14,-86,-104,-122,67,77,-45,13,71,-106,-122,-9,90,4,10, 
  /* [18][0][][] */ -102,97,105,-76,-14,-118,-110,2,-9,73,-114,-50,-43,30,56,-64,16,-29,63,-29,98,-52,17,-86,23,-104,-23,108,24,30,-4,39,41,-34,-115,-115,-38,37,-40,60,-45,-5,-57,-14,-122,11,22,-9,13,-30,67,27,-116,-14,-2,83,-49,31,-24,-125,81,107,8,32,-75,-127,-37,86,65,-71,-78,107,-104,-31,-95,-111,50,52,-6,-82,-63,-13,-33,-72,99,-39,68,65,-115,-81,-70,103,84,-61,45,-18, 
  /* [19][0][][] */ 18,30,78,38,59,-91,99,94,99,-68,29,-14,-102,33,-60,62,76,-112,113,59,-24,83,-60,13,83,-86,31,-72,-98,-125,-71,46,83,-89,33,-4,10,-75,-61,-107,45,-124,-89,9,-90,31,79,-98,-30,37,-44,46,-38,15,4,-12,23,102,-2,-29,58,-60,104,63,-76,-4,-30,-3,-11,54,78,-55,-67,-127,-60,-86,-23,-107,14,112,60,-123,-33,80,-92,-9,8,-4,93,31,-6,66,-37,119,74,-52, 
  /* [20][0][][] */ -15,67,66,92,-93,89,15,56,13,8,-92,-2,-11,85,37,-79,-58,-42,-72,-37,19,-51,-83,-77,75,-79,-111,44,18,8,-46,112,99,41,-20,52,39,-38,-22,-115,-91,-40,-95,-109,-33,-70,-76,104,60,-127,-110,37,44,110,48,-5,90,71,97,88,110,-60,-74,-39,-33,-73,-57,10,-91,-83,-74,76,-70,-91,27,14,109,74,108,107,84,0,81,-30,57,114,-19,73,16,95,23,63,18,22,-9,0, 
  /* [21][0][][] */ 103,84,81,-94,106,-69,82,25,3,-57,-66,51,12,47,-43,-84,-95,-23,35,-6,115,-41,79,-76,64,-79,-25,82,23,11,1,-14,14,28,-85,-106,118,105,-110,-26,1,14,36,-7,-91,-77,-73,101,-16,-61,1,93,44,77,-87,34,-44,60,-45,127,62,-68,20,-5,89,39,-28,-62,-98,5,67,85,41,-13,80,76,-107,-21,70,114,21,110,42,-66,32,-90,72,-79,-99,85,118,-107,-36,-61,75,-22, 
  /* [22][0][][] */ 43,-48,-66,-91,101,-49,122,67,-93,100,-70,-103,127,-107,-109,-80,49,96,-108,-53,100,-67,41,42,103,5,-110,113,-51,-72,-58,-105,60,73,29,22,11,-10,-53,-111,10,-5,9,107,67,-113,105,-16,-57,-75,15,-11,-58,-87,-41,45,-5,-22,-17,-24,121,-70,-71,-109,-60,29,-109,-38,125,117,-16,6,-61,13,75,-85,54,-44,75,106,119,-92,-68,-114,90,95,110,-29,-50,40,-59,72,30,28,-22,109, 
  /* [23][0][][] */ 73,-84,14,68,108,-109,13,-96,63,-75,95,85,26,-102,28,-33,99,-26,-102,111,103,-75,114,-27,-10,-6,93,30,81,56,82,-31,-31,52,28,44,107,0,-107,14,-99,8,16,-105,-63,-86,124,35,87,-105,-83,-49,91,-54,-46,100,-78,-13,108,53,-108,-85,-47,-3,42,46,-111,-104,73,-7,122,-66,1,-29,-31,-89,53,-14,104,127,-47,-44,30,-102,103,15,123,-17,-86,49,117,1,117,-47,-25,93, 
  /* [24][0][][] */ -67,-40,-94,-58,-75,-102,-59,-81,73,127,91,53,124,72,-29,-107,-71,52,37,-42,105,-70,-46,-27,60,-19,84,67,116,64,15,-53,8,19,60,39,-44,-78,71,-11,-63,-89,111,14,31,-28,54,81,-78,-36,-12,18,81,69,79,-63,6,87,33,9,99,5,46,105,-88,106,-36,-79,-91,61,-48,-16,-29,43,104,111,70,-66,-94,-73,-69,-83,-52,-106,11,72,-4,-92,36,-99,16,-68,-7,38,-84,36, 
  /* [25][0][][] */ -78,-49,-71,-1,102,-65,-95,63,51,-103,-31,31,81,8,-101,-15,-65,69,42,-101,77,94,-4,-50,21,-44,-95,47,86,-82,48,124,102,-102,53,82,106,-51,-15,-10,-75,106,-98,11,107,49,75,44,-97,102,-62,11,52,-12,-54,20,-12,61,-102,82,127,52,61,55,9,84,-9,2,-82,4,-17,-105,43,-105,80,31,79,82,23,28,59,60,-39,91,-68,-40,-96,-86,-14,-31,114,31,-107,-6,-12,-74, 
  /* [26][0][][] */ 50,-122,-27,-19,-104,-9,-15,-17,-110,-127,105,82,-83,-52,7,-19,110,27,-85,-72,10,69,97,10,49,60,9,43,9,2,-98,-6,-34,-66,-104,-108,-70,81,-56,107,-104,99,54,29,-77,71,-46,100,-26,26,-10,97,7,-52,-9,-111,93,61,52,22,-1,-100,61,-26,112,-24,-61,54,-92,75,85,94,78,-103,-91,3,44,-115,-101,7,-33,71,80,-81,77,-4,-49,12,-86,112,6,14,-62,113,49,84, 
  /* [27][0][][] */ 6,4,-69,-111,-127,-77,-77,-22,40,96,34,-113,-34,53,79,-35,62,-22,58,-91,-101,5,-34,-29,-112,42,-116,-8,61,24,-39,-15,58,66,-99,-94,-95,-71,-120,86,-103,13,24,14,97,21,64,101,89,64,56,-80,-97,-93,-12,-41,99,-30,-119,-84,-62,-67,-40,50,36,-53,-121,103,45,6,-125,3,58,-57,-13,-95,45,-72,86,101,82,-33,113,-55,-81,-90,-39,28,-54,-8,-41,-57,52,13,84,54, 
  /* [28][0][][] */ 105,5,103,57,-111,-59,-94,-70,-45,-104,72,84,-75,-81,14,115,108,127,-67,89,-18,35,-105,-69,-118,96,-79,-56,-68,-71,8,-11,-99,27,95,86,25,-104,-35,41,119,54,-91,62,-105,-1,25,59,33,-57,-75,-30,-82,34,66,52,71,-4,92,63,-2,-36,-93,14,70,87,-13,96,-74,37,-101,-35,84,49,3,-96,-115,-62,-82,57,-69,-87,124,-28,74,-110,78,-82,-100,-70,-28,-61,-32,64,-97,-65, 
  /* [29][0][][] */ 48,50,53,-60,-96,8,-127,1,100,-20,-97,-103,105,-113,-55,-53,-108,101,23,-73,-83,-41,51,0,-40,3,-51,-34,-111,-12,102,-8,48,-4,-88,-62,-15,101,-15,93,45,106,-51,81,-5,105,-61,-31,14,-12,55,-101,69,-108,110,43,-102,53,-55,108,-125,95,-102,-58,-68,-71,49,87,94,-94,30,-79,110,74,58,21,115,-71,-36,29,-11,-92,-14,-84,61,116,41,78,-43,96,68,79,-112,13,-6,57, 
  /* [30][0][][] */ 26,-71,-67,39,-101,22,-72,-14,120,-11,3,-41,-109,16,61,8,-6,36,103,-107,41,-107,-110,26,-116,22,-63,121,-16,-118,-98,3,-89,-77,-127,-59,24,-12,-5,25,94,-83,-6,101,108,-49,115,69,-74,75,19,-107,102,-58,-6,107,-81,-63,-79,-52,-113,-7,-80,-27,-111,-94,-95,93,-67,123,51,-34,-98,117,38,-94,-65,-66,-82,-64,36,24,-105,-20,-116,29,-111,120,-37,-120,80,62,-40,-4,15,-69, 
  /* [31][0][][] */ 78,-97,33,96,46,59,-64,-104,-33,-25,-83,-91,97,-127,-52,108,-66,-94,32,45,60,33,-35,103,41,-119,33,36,-78,-78,43,105,14,17,-97,-12,94,-34,-72,-116,57,-74,-35,29,1,-58,-44,21,68,20,90,-33,-120,-62,-86,20,-123,65,1,112,-43,-7,83,-80,66,109,-49,-83,70,-126,-124,7,-101,-39,0,2,-63,-52,47,88,-81,-47,52,68,54,94,-99,15,15,-56,-91,-59,8,102,-9,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018110863165929914, 0.0018277989001944661, 0.0017898414516821504, 0.0017827857518568635, 0.0017655662959441543, 0.0018058313289657235, 0.0017791998106986284, 0.0018154899589717388, 0.001807419816032052, 0.0018013747176155448, 0.0018368422752246261, 0.001826069550588727, 0.0018151941476389766, 0.001824522390961647, 0.0018234385643154383, 0.0017983531579375267, 0.0016844419296830893, 0.00176278967410326, 0.0017766000237315893, 0.0017189241480082273, 0.0017620649887248874, 0.0018066068878397346, 0.0017686609644442797, 0.0017775451997295022, 0.0018416860839352012, 0.0018185335211455822, 0.0017994788940995932, 0.0017687468789517879, 0.0017189375357702374, 0.0017521727131679654, 0.0017224770272150636, 0.0018155589932575822, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 2123, -165, 4051, 8018, 7288, -3722, 6225, -1637, -3587, -1219, 6772, -4049, 6172, 7893, 3213, 3328, -1068, -800, -2533, 7288, 3342, -680, 3927, -913, -1905, 5014, 2080, 2607, 6944, 3099, 5743, 2058, 1773, 8100, 7762, 5320, -633, 4942, 4085, -6974, -553, 1688, -155, 2047, -1969, 545, -1767, 1109, -11991, 2393, 1541, -4492, 9744, -1129, 2225, 2093, 1279, 4524, -1078, -2974, 284, 2923, 577, 5710, 7420, 5250, 3854, 7361, 6271, -864, 4148, 8380, 4521, -2229, 7775, 8071, 1087, -4769, 839, 2138, 11828, 3038, -646, -3530, 1702, 902, 2028, -3404, 5776, -893, 5682, 1588, 180, -4354, -186, 2211, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 9.850311471382156e-05, 0.00015674908354412764, 0.00013765780022367835, 9.6532879979349673e-05, 8.7966123828664422e-05, 0.00011087103484896943, 9.7059957624878734e-05, 0.00013790118100587279, 0.00011171021469635889, 0.00012749704183079302, 9.2591646534856409e-05, 0.00010623670823406428, 9.2629903519991785e-05, 7.7442520705517381e-05, 9.9794677225872874e-05, 0.00011727782111847773, 0.0001542672689538449, 0.00012970513489563018, 0.00012013968807877973, 8.6776912212371826e-05, 0.00012888756464235485, 0.00013337525888346136, 9.4648959930054843e-05, 0.00013510836288332939, 0.00012897387205157429, 0.00011867242574226111, 0.00014348060358315706, 0.00012856628745794296, 0.0001050476566888392, 0.0001404823997290805, 9.3656068202108145e-05, 0.00011252734111621976, 0.00015870349307078868, 7.542371895397082e-05, 8.1015103205572814e-05, 9.4874143542256206e-05, 0.00015412448556162417, 9.0343040938023478e-05, 9.9059914646204561e-05, 7.5958843808621168e-05, 0.00013991096056997776, 0.0001319156726822257, 0.00013875607692170888, 0.00012538574810605496, 0.00012434949167072773, 0.00010843777999980375, 0.0001337137509835884, 0.00011628351785475388, 5.9576137573458254e-05, 0.00011395735782571137, 0.00017150017083622515, 0.00010563759133219719, 7.571156311314553e-05, 0.00013695191591978073, 0.00014724103675689548, 0.00012371524644549936, 0.00013118243077769876, 8.6718209786340594e-05, 0.00013036814925726503, 0.00010526991536607966, 0.0001651958009460941, 9.4717033789493144e-05, 0.00017015555931720883, 0.00011790896678576246, 9.3462615041062236e-05, 9.2024194600526243e-05, 0.00010218667739536613, 0.00010004224168369547, 0.00010871177801163867, 0.00014819661737419665, 0.00011838880891446024, 8.0944373621605337e-05, 0.00010343009489588439, 0.00010248951002722606, 9.0069617726840079e-05, 0.00010042236681329086, 9.5295537903439254e-05, 0.00013056192256044596, 0.00010878797911573201, 0.00010232358908979222, 7.1057365857996047e-05, 9.903434693114832e-05, 0.00013397150905802846, 0.00011697237641783431, 0.00011521184933371842, 0.00011056787479901686, 0.00013292052608449012, 0.00011888113658642396, 0.00010885638766922057, 0.00011055543291149661, 0.0001079831927199848, 0.00013326849148143083, 0.00011211336095584556, 0.00010090257273986936, 0.00015715684276074171, 0.00010694661614252254, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -10,90,-85,32,44,-29,91,68,-62,8,35,-95,87,127,-56,18, 
  /* [1][0][][] */ -16,3,-54,-21,-6,41,20,-127,33,-50,-25,-54,-14,-44,-50,2, 
  /* [2][0][][] */ -20,-25,35,78,26,40,-108,127,-20,4,72,-55,-22,-65,-41,65, 
  /* [3][0][][] */ 85,-96,72,-10,-8,-29,-29,127,-33,62,73,45,-1,63,16,13, 
  /* [4][0][][] */ -47,-27,-16,46,-99,21,-30,-127,0,-5,39,-23,46,55,116,118, 
  /* [5][0][][] */ 127,27,-22,-21,-78,24,25,74,11,-13,65,96,117,30,-84,2, 
  /* [6][0][][] */ 13,-41,-66,-60,-78,7,2,-52,-49,-48,-27,23,96,50,127,-6, 
  /* [7][0][][] */ -54,29,-34,-81,-1,-56,-77,18,-103,58,-67,-66,-127,-35,20,91, 
  /* [8][0][][] */ 54,46,75,8,56,24,73,7,68,-28,43,5,-127,-24,-82,10, 
  /* [9][0][][] */ -35,65,32,-43,-25,-16,28,-13,-32,48,-43,16,42,127,26,26, 
  /* [10][0][][] */ 70,56,-41,56,-25,-21,57,-55,-70,-40,-56,-101,-127,-78,6,99, 
  /* [11][0][][] */ 57,3,62,7,-16,-29,6,119,-98,31,-34,-1,-9,0,75,127, 
  /* [12][0][][] */ -56,-26,0,-5,18,7,127,40,-68,29,7,-21,-1,88,-43,108, 
  /* [13][0][][] */ 12,48,23,46,112,41,117,99,-53,104,-85,-76,44,104,-127,-19, 
  /* [14][0][][] */ -127,119,-1,-19,-9,8,69,-4,-48,39,124,-14,-90,27,-50,54, 
  /* [15][0][][] */ -11,-17,-127,-42,85,-43,-92,-36,-22,-22,-19,-66,-11,-86,-59,48, 
  /* [16][0][][] */ 111,-14,13,-8,34,-34,48,-20,-38,9,127,56,44,3,-44,23, 
  /* [17][0][][] */ 16,20,-22,-93,-7,-63,116,-127,-2,-25,-45,36,34,75,8,51, 
  /* [18][0][][] */ 31,127,-8,-45,65,-74,-26,-56,-37,127,-29,2,-35,52,-15,-32, 
  /* [19][0][][] */ -74,-126,118,-100,39,-127,34,-42,44,50,96,98,35,-8,71,-29, 
  /* [20][0][][] */ -18,93,59,4,10,-1,23,-29,60,-5,100,-28,-127,-22,-78,-9, 
  /* [21][0][][] */ -65,41,19,16,62,39,68,54,-127,57,-38,17,-21,20,-61,-29, 
  /* [22][0][][] */ 13,-96,43,8,16,-127,122,3,14,-51,-40,-84,51,-81,-61,-52, 
  /* [23][0][][] */ -54,-93,47,68,32,-18,21,-41,16,-40,80,6,5,70,73,127, 
  /* [24][0][][] */ 1,-2,28,84,50,14,-55,-127,63,12,-46,19,-2,0,-21,-29, 
  /* [25][0][][] */ -9,34,23,-45,-23,-3,10,-33,-30,48,-44,-9,35,127,17,6, 
  /* [26][0][][] */ -69,77,2,15,28,-85,0,-36,15,24,16,71,13,0,-85,127, 
  /* [27][0][][] */ -18,-127,-45,9,-58,94,-1,-63,20,-41,55,-27,27,-50,-106,-21, 
  /* [28][0][][] */ -36,0,35,77,24,13,-37,-127,-116,50,105,-16,75,8,-44,-23, 
  /* [29][0][][] */ -127,105,-27,-35,-30,24,-119,-76,-40,-31,1,-7,13,-58,-112,62, 
  /* [30][0][][] */ 50,71,-54,72,-108,-86,-70,-15,-41,0,9,-111,127,39,-8,87, 
  /* [31][0][][] */ 127,31,-61,-30,-63,16,97,41,-61,-19,68,53,36,24,-21,9, 
  /* [32][0][][] */ -28,-16,127,4,-18,67,69,16,-15,-16,-10,24,3,63,60,37, 
  /* [33][0][][] */ 3,29,-59,-47,-18,23,127,29,-7,-20,23,-69,93,126,-55,59, 
  /* [34][0][][] */ -96,-25,103,24,34,-61,115,-14,-127,33,41,-41,55,57,-60,-33, 
  /* [35][0][][] */ -7,15,-58,10,-83,124,-32,-20,-25,127,8,87,-64,74,21,39, 
  /* [36][0][][] */ -8,-71,127,-47,-50,14,-43,-11,17,20,-51,78,-1,-85,-40,43, 
  /* [37][0][][] */ 94,-6,80,-27,116,-73,-56,41,-59,127,-68,5,-101,-45,114,-27, 
  /* [38][0][][] */ 53,49,13,-118,-14,-54,-111,63,-99,58,-106,-60,-83,-127,-110,69, 
  /* [39][0][][] */ -75,23,-55,-30,-78,-77,70,15,-127,-37,23,83,31,1,-2,53, 
  /* [40][0][][] */ 127,39,11,-84,-66,24,11,-42,-33,-29,-46,-72,9,47,37,31, 
  /* [41][0][][] */ 89,-72,-59,-44,-10,1,-55,-15,52,-17,8,-53,127,-63,56,-32, 
  /* [42][0][][] */ -16,-81,-37,127,8,-95,-104,12,11,5,3,48,-80,67,-62,-6, 
  /* [43][0][][] */ -87,-46,-43,-117,-54,4,-5,79,40,-127,-38,40,-22,-50,-27,92, 
  /* [44][0][][] */ -36,48,45,-41,-20,-29,31,127,115,-89,79,115,119,51,-22,1, 
  /* [45][0][][] */ 34,76,-73,96,127,-88,-41,-59,108,-68,63,-60,-33,7,-68,57, 
  /* [46][0][][] */ -27,-45,6,-13,96,-26,36,16,-9,125,-24,-127,39,63,-53,80, 
  /* [47][0][][] */ 80,-41,-29,-9,82,-19,-42,-60,-1,127,-31,37,-9,-106,-84,11, 
  /* [48][0][][] */ 13,29,-11,-127,-7,-52,115,-118,4,5,-39,47,52,67,7,39, 
  /* [49][0][][] */ -23,122,-75,34,42,-51,68,65,-36,26,48,-93,-22,82,127,-96, 
  /* [50][0][][] */ 14,37,-23,0,-127,3,-68,-53,50,70,31,29,-33,-36,4,32, 
  /* [51][0][][] */ 127,-43,-52,-16,-49,89,-92,-39,43,-14,-37,66,-28,-62,6,41, 
  /* [52][0][][] */ -29,-51,50,73,-45,-117,-127,-18,-45,-63,-28,-76,17,-73,5,93, 
  /* [53][0][][] */ 22,95,52,-127,3,104,93,-23,-14,-28,-9,-43,84,-115,3,60, 
  /* [54][0][][] */ 35,123,11,-15,0,-92,-104,47,8,-27,-42,127,75,83,15,57, 
  /* [55][0][][] */ -44,-18,46,22,43,-32,105,82,-78,-1,22,4,127,47,-6,2, 
  /* [56][0][][] */ 127,26,17,27,-43,105,-54,-77,-21,43,-83,8,-63,97,-13,37, 
  /* [57][0][][] */ -52,-35,-47,-32,-70,-102,70,-27,-127,-32,63,52,17,36,-8,55, 
  /* [58][0][][] */ 45,-56,59,19,4,-67,-15,4,24,-11,-127,-31,28,-34,-39,49, 
  /* [59][0][][] */ 80,17,-127,97,12,33,88,-32,-71,-54,32,-101,-122,-64,27,111, 
  /* [60][0][][] */ -3,32,-11,18,-15,-27,-20,1,-33,-80,59,120,-49,-127,-38,-3, 
  /* [61][0][][] */ -29,9,77,-103,-82,62,-1,127,-24,-99,60,66,103,3,21,117, 
  /* [62][0][][] */ 73,40,-11,-127,-18,5,9,-42,-6,30,-32,41,27,-19,-87,-70, 
  /* [63][0][][] */ -3,-28,-2,-8,-59,-63,-53,5,-71,-9,-29,-20,127,7,49,-10, 
  /* [64][0][][] */ 23,-3,-21,51,-113,-38,-19,-79,55,127,43,-7,47,-48,-42,113, 
  /* [65][0][][] */ -34,5,-24,-20,-88,79,26,-31,57,-119,101,-75,83,67,-127,62, 
  /* [66][0][][] */ -119,103,-90,-81,45,-35,-118,-65,-98,108,86,10,-127,-63,48,52, 
  /* [67][0][][] */ 5,-34,-127,-110,61,73,6,-23,-30,-2,46,-20,30,40,21,44, 
  /* [68][0][][] */ 54,18,-18,-50,-71,44,14,43,-60,75,127,-19,-6,-40,-114,-5, 
  /* [69][0][][] */ 75,-105,49,-47,15,-102,-27,127,-4,66,81,72,-15,76,-20,-2, 
  /* [70][0][][] */ 42,7,109,33,91,-19,127,7,30,20,-57,31,-64,63,-79,40, 
  /* [71][0][][] */ 11,33,101,-72,-127,-84,12,11,-22,-13,18,-101,-81,1,13,30, 
  /* [72][0][][] */ -61,-100,25,-124,78,-9,6,50,-74,19,-123,-15,64,127,-57,120, 
  /* [73][0][][] */ 28,15,46,-8,122,-92,-54,13,-39,102,-85,35,-81,-50,127,-18, 
  /* [74][0][][] */ -100,7,-120,-64,69,-48,-43,23,-83,-1,-127,-31,-41,-64,-46,77, 
  /* [75][0][][] */ 86,-21,44,-46,16,9,-127,-24,-9,-91,70,4,6,-8,-3,-12, 
  /* [76][0][][] */ 7,-49,-32,113,42,84,95,-54,86,-127,62,118,32,-91,-62,36, 
  /* [77][0][][] */ -36,-36,127,-20,35,-31,-30,-109,15,22,35,92,42,51,20,0, 
  /* [78][0][][] */ -46,2,17,-35,2,-60,31,-6,28,-14,14,-89,-107,-76,-127,-54, 
  /* [79][0][][] */ -111,-82,-27,19,127,40,-12,16,27,37,-10,46,-39,-75,-73,-12, 
  /* [80][0][][] */ 0,-112,53,127,-29,-34,-101,76,-6,18,69,3,-85,-13,-24,66, 
  /* [81][0][][] */ 110,59,-23,79,-7,38,24,127,17,16,118,51,119,27,63,-19, 
  /* [82][0][][] */ -53,2,14,-33,31,-127,-111,-86,0,79,-41,-38,-25,102,-68,-21, 
  /* [83][0][][] */ 108,-24,76,-34,-41,-7,-127,-4,21,-115,14,-47,-13,-8,17,-23, 
  /* [84][0][][] */ 18,-64,-89,33,127,36,35,34,-107,21,-108,-19,42,-33,-75,10, 
  /* [85][0][][] */ 17,91,46,-43,101,-3,40,-109,127,-38,33,-8,88,-84,12,-2, 
  /* [86][0][][] */ 120,-34,127,51,3,-59,76,37,-61,-52,-93,-49,37,19,-66,8, 
  /* [87][0][][] */ -2,8,20,-74,73,-29,-46,17,36,-36,70,-33,-86,-127,-1,20, 
  /* [88][0][][] */ -61,-30,40,-5,26,26,-63,-50,-2,8,-71,-127,-51,-42,-20,-15, 
  /* [89][0][][] */ -70,13,24,-63,28,3,-127,25,83,26,-71,-7,-17,-79,-39,-23, 
  /* [90][0][][] */ -15,-20,-36,-86,127,24,-57,38,41,59,35,-18,38,21,-69,-17, 
  /* [91][0][][] */ -35,-55,24,51,-36,-15,-8,68,-32,-59,28,-38,-9,52,17,127, 
  /* [92][0][][] */ -27,73,-3,-15,-24,56,-93,52,-42,-5,62,-2,-27,127,53,26, 
  /* [93][0][][] */ -5,76,-47,-65,70,83,-82,11,59,63,70,58,-127,27,-37,72, 
  /* [94][0][][] */ 22,61,92,8,-127,-36,13,-14,22,-21,31,-22,-50,-22,13,-21, 
  /* [95][0][][] */ -10,31,50,7,127,-22,-83,63,27,9,-80,90,-13,2,90,-40, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015258195344358683, 0.0024280531797558069, 0.0021323279943317175, 0.0014953004429116845, 0.0013626008294522762, 0.0017173993401229382, 0.0015034648822620511, 0.0021360979881137609, 0.0017303982749581337, 0.0019749372731894255, 0.0014342505019158125, 0.0016456133453175426, 0.0014348430559039116, 0.0011995895765721798, 0.0015458258567377925, 0.0018166408408433199, 0.0023896098136901855, 0.0020091407932341099, 0.0018609713297337294, 0.0013441798510029912, 0.0019964764360338449, 0.0020659912843257189, 0.0014661183813586831, 0.0020928371232002974, 0.0019978133495897055, 0.0018382434500381351, 0.0022225235588848591, 0.0019914999138563871, 0.0016271948115900159, 0.002176081296056509, 0.0014507384039461613, 0.001743055647239089, 0.002458327217027545, 0.0011683182092383504, 0.001254929113201797, 0.0014696065336465836, 0.0023873981554061174, 0.0013994193868711591, 0.0015344443963840604, 0.0011766073293983936, 0.0021672295406460762, 0.0020433820318430662, 0.0021493404638022184, 0.001942233182489872, 0.0019261814886704087, 0.0016797081334516406, 0.0020712343975901604, 0.0018012390937656164, 0.00092283816775307059, 0.0017652066890150309, 0.0026565485168248415, 0.001636332948692143, 0.001172776916064322, 0.0021213938016444445, 0.0022807728964835405, 0.00191635696683079, 0.0020320240873843431, 0.001343270530924201, 0.0020194109529256821, 0.0016306376783177257, 0.0025588935241103172, 0.0014671728713437915, 0.0026357204187661409, 0.0018264173995703459, 0.001447741873562336, 0.0014254605630412698, 0.001582878059707582, 0.0015496606938540936, 0.0016839522868394852, 0.0022955751046538353, 0.0018338501686230302, 0.0012538335286080837, 0.0016021387418732047, 0.0015875690151005983, 0.0013951840810477734, 0.0015555488644167781, 0.0014761339407414198, 0.0020224123727530241, 0.0016851327382028103, 0.0015849989140406251, 0.001100683119148016, 0.0015340483514592052, 0.0020752272102981806, 0.0018119094893336296, 0.0017846388509497046, 0.0017127033788710833, 0.0020589474588632584, 0.001841476303525269, 0.001686192350462079, 0.0017125107115134597, 0.0016726665198802948, 0.0020643374882638454, 0.0017366430256515741, 0.0015629872214049101, 0.0024343694094568491, 0.001656609820201993, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9602, 15100, -4772, 3275, -1122, 9086, -616, 4199, 16583, -4267, -9789, 9033, -14417, 11986, 5396, 6991, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.7276571169495583e-05, 6.9237183197401464e-05, 5.7077813835348934e-05, 6.5669919422362e-05, 7.521730731241405e-05, 6.2663435528520495e-05, 5.9374484408181161e-05, 5.6107968703145161e-05, 0.00010131351154996082, 6.8476867454592139e-05, 5.135493483976461e-05, 5.1596365665318444e-05, 7.6050106144975871e-05, 5.9217396483290941e-05, 9.6034171292558312e-05, 6.1344217101577669e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -101,40,55,-30,-65,-5,-69,2,-50,9,-8,-29,29,38,34,-34,12,-4,91,16,5,-54,127,68,49,25,8,26,-65,-113,-90,7,-40,-42,25,22,11,27,0,33,-10,-1,-79,9,-65,-22,-4,90,-23,13,-43,-20,-11,3,27,-51,-102,0,-16,83,57,31,-5,6,-35,-49,-44,26,-56,-67,6,-15,4,1,-76,-50,-48,16,-33,10,-54,70,81,-75,5,47,13,53,33,-19,-10,-20,-37,-37,-60,15, 
  /* [1][0][][] */ 34,20,26,-50,-62,-21,-7,10,-20,20,55,-53,6,-7,-63,-32,-6,-4,-67,28,-17,-73,4,45,-9,-61,-4,-46,62,-102,101,-72,54,22,-20,52,33,71,-7,-39,29,17,1,-11,11,56,-127,-46,-55,-50,-15,-26,41,-48,-38,45,7,-5,-33,15,28,49,-5,-94,-17,-15,-56,-9,4,-17,-77,-11,-45,-20,15,-74,6,17,32,-68,-24,-28,-89,-31,32,-39,-25,21,-76,-8,-52,45,16,57,-52,50, 
  /* [2][0][][] */ 87,-38,25,28,16,-77,69,5,-12,-10,-16,-17,-79,-35,15,-39,-102,-49,-36,43,10,-53,-51,33,2,-76,6,-25,-29,44,-62,126,-59,127,-26,20,-14,-21,-21,-16,-101,83,75,14,-71,6,-17,-9,43,1,-30,-50,56,-16,-20,73,45,-1,53,-7,7,42,-36,14,81,9,-2,-5,31,58,-45,-5,54,47,72,41,37,-71,74,54,91,-11,-40,31,-54,38,20,69,14,12,-26,28,-46,53,-19,32, 
  /* [3][0][][] */ -3,-7,-19,11,10,-14,4,-64,-27,56,39,61,27,-7,-52,39,9,-33,31,8,16,127,30,-49,6,27,-24,6,70,-38,62,-20,-21,31,-27,-30,21,48,34,8,-73,-35,-41,27,-35,36,26,-6,-17,-49,-5,-24,52,-83,-31,-51,13,91,-26,-2,-7,-8,-39,0,29,44,-43,2,-23,-5,14,-74,-30,-50,32,-8,16,-7,-36,-34,-31,-6,-58,14,-8,-38,31,-30,2,21,32,-22,51,24,-34,64, 
  /* [4][0][][] */ 32,14,-44,13,30,17,-44,10,-26,82,99,-14,-15,4,3,-48,8,-14,-32,52,15,-52,56,90,-71,3,-127,13,-46,-61,11,19,-59,-47,14,59,11,40,25,32,-33,-39,49,-24,-6,12,-37,52,-43,55,14,19,41,-11,-80,20,51,-21,13,-5,51,-2,31,7,-44,11,-33,9,-46,25,-48,57,39,-62,-42,-47,29,-56,-4,8,-42,92,-83,5,-29,19,34,-55,58,1,27,8,-58,-28,33,30, 
  /* [5][0][][] */ -85,36,53,-12,46,-16,61,-46,-15,30,-4,-29,40,-24,-25,-47,-6,-40,53,22,-124,-18,-80,46,-48,-6,45,9,42,-85,-16,47,59,120,-17,38,-5,20,42,-17,-34,98,77,-27,-4,65,43,-7,-4,19,-29,27,13,-44,27,-103,39,-54,-71,-72,61,100,-50,-16,77,-38,-85,-71,-65,-18,-65,-12,-25,15,-28,-43,19,-47,-41,-22,127,-30,29,-97,-92,43,36,-18,-56,44,28,-4,-22,36,14,97, 
  /* [6][0][][] */ 45,-12,-87,32,-33,-112,103,96,-58,77,-20,77,-121,-79,63,61,-6,-57,-6,3,-5,-20,-69,-59,-61,40,81,27,35,34,94,-54,22,20,18,-82,19,5,35,70,11,20,-54,-29,-5,-59,-80,19,40,-127,-26,80,35,10,-20,-69,78,48,18,2,-111,52,-99,-1,33,3,4,57,45,23,1,-49,-34,21,101,35,68,-19,48,-75,-6,-51,-80,71,12,-63,47,18,-38,59,34,39,-20,17,-37,116, 
  /* [7][0][][] */ 36,83,-38,-59,-27,-8,37,15,-54,32,-53,-51,-34,11,6,-9,-49,-45,-31,59,-1,127,14,28,-4,2,21,30,47,42,74,-26,64,29,-24,11,3,-9,-2,30,-67,-6,7,-57,16,-49,76,-22,44,-69,-80,-29,-50,10,-2,-10,29,13,-103,3,-10,107,14,-20,-19,4,-43,18,-40,-11,-103,34,16,64,-35,40,-55,57,5,-71,-15,-53,64,-79,38,-18,-10,0,-12,76,-84,51,51,-29,-46,7, 
  /* [8][0][][] */ -5,80,-48,38,-31,-27,-80,27,-92,-32,9,2,-44,36,28,85,7,-49,2,12,27,-4,6,-12,-34,76,0,21,-18,-16,-42,-28,-17,-51,-31,-65,-42,27,50,8,-5,-36,27,13,-32,-35,3,-12,-27,-14,46,65,-4,-22,-72,97,-37,26,-6,-36,-33,12,22,52,-34,-60,-33,-8,-39,6,0,6,-22,-45,-118,-17,-48,27,-58,-37,-30,0,-42,-35,-3,-7,23,33,10,62,-55,-7,-88,-127,21,-47, 
  /* [9][0][][] */ -16,16,-68,49,-37,-30,68,53,-11,44,-27,92,-26,-25,27,127,14,15,71,14,23,18,38,-96,-31,-7,22,-7,15,-19,37,48,-32,-4,2,-119,24,-21,-27,-22,-12,17,38,-28,-13,0,21,16,39,84,24,-7,-53,-75,1,-3,3,-6,68,-22,-68,53,-64,-24,86,-7,-27,10,-71,32,40,33,-5,85,-20,-23,-27,22,-46,-7,49,-33,67,-6,30,-12,-16,-38,-56,21,2,-2,68,34,-43,-3, 
  /* [10][0][][] */ 72,-3,-40,-5,-40,-28,77,-3,7,-29,-25,-7,-92,-22,7,-9,-71,-29,23,19,44,40,26,2,-45,79,38,-2,-50,-80,-34,-16,73,-40,51,9,73,-93,81,124,13,-64,2,3,-25,-96,-3,69,38,92,-70,-49,-26,29,17,57,22,-58,77,47,-15,45,-70,-16,-3,-55,16,62,17,-20,-7,39,127,33,29,-90,28,-48,52,-7,-51,28,40,20,-42,-5,2,38,-47,-9,33,57,57,73,-31,6, 
  /* [11][0][][] */ -54,-40,40,-72,19,-17,-28,-43,49,-46,-1,-9,-22,-4,11,9,-69,0,68,17,-62,20,-77,-85,17,11,-47,45,37,-61,40,-38,19,-1,19,-32,-78,7,-126,16,-71,71,-48,54,24,6,-1,-36,22,-46,-63,-55,21,33,85,-57,-32,-73,18,-52,-28,-53,-31,-125,7,-68,69,76,127,18,77,-16,-37,-16,69,-42,104,44,32,53,34,-8,-24,92,86,3,-6,-17,-81,-73,-18,31,60,45,61,78, 
  /* [12][0][][] */ 35,-26,1,-34,31,112,-9,29,42,57,-3,52,20,42,18,-3,-58,51,18,44,127,3,65,-72,30,19,-69,-63,-15,73,-1,4,26,-12,10,-37,41,-6,-37,-38,17,-23,38,48,-25,32,6,-7,-57,27,0,20,-23,-28,14,16,-34,62,12,45,22,-94,8,-90,-3,96,-18,-29,-8,-36,63,7,-4,10,-5,48,-11,46,-77,-9,-22,26,123,14,-6,78,-32,-71,68,11,-74,49,72,11,-16,-93, 
  /* [13][0][][] */ -12,32,-12,-43,-39,-3,9,-39,16,-29,-39,-81,68,-118,-41,-79,-23,-33,-83,-20,-94,-29,24,103,-27,2,119,11,27,-43,58,46,8,-4,-126,127,-35,-61,24,-64,126,9,-5,22,-6,-97,67,-29,88,-14,-45,32,29,-1,-1,76,78,-53,-43,-14,49,43,-7,-86,2,42,-45,41,-77,-34,-81,-3,-64,17,-40,-93,-109,19,35,88,-15,65,45,-101,62,51,32,-20,-23,-14,-11,17,-59,24,-24,-10, 
  /* [14][0][][] */ -7,21,-78,-27,80,95,-90,-5,30,-48,77,-10,14,-26,-37,-70,-64,18,30,127,9,-23,-5,5,5,37,-30,67,10,-8,-27,7,61,-4,-39,4,-20,61,72,8,57,-4,24,2,-5,-44,57,-37,22,-9,-16,-27,43,14,-36,27,8,59,-95,-13,-19,-68,-44,-98,5,-37,-47,-6,-79,55,-18,28,0,-28,-23,-39,36,-11,-55,-27,29,0,0,-20,-15,46,-14,-20,-35,69,64,23,0,-42,-43,-67, 
  /* [15][0][][] */ -73,-42,42,-63,20,-25,-33,-93,-6,19,-3,69,-4,-22,33,96,-112,-25,25,-70,32,-30,-15,-85,50,-8,57,-56,-63,-105,-72,37,-35,61,92,-98,-3,-37,25,-26,-19,-3,37,-15,0,1,67,110,-46,-5,20,-46,-47,55,13,-57,-98,-8,110,15,-27,18,-94,28,-64,-12,6,25,53,-73,93,-25,63,-37,-32,-50,9,24,52,0,-16,79,57,35,5,-14,-127,6,-4,-56,-81,29,46,-33,-24,69, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024342541582882404, 0.0029425802640616894, 0.002425807062536478, 0.0027909714262932539, 0.0031967354007065296, 0.0026631960645318031, 0.0025234154891222715, 0.0023845885880291462, 0.0043058241717517376, 0.0029102668631821871, 0.0021825847215950489, 0.0021928455680608749, 0.0032321293838322163, 0.0025167393032461405, 0.004081452265381813, 0.0026071290485560894, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -707, 840, -3276, -5294, -325, 2526, -745, -369, -676, -1045, 12695, -2578, -1023, 11140, 9136, -5540, 15208, 3038, -5238, 418, -1415, -2006, -75, -2045, 504, -4598, 141, -5393, 51, -8953, -587, 766, 12144, 128, -793, -220, -702, -1799, -1207, 7854, -695, -130, 672, -6349, 14019, 15343, 41, 16564, -1312, 14946, 16510, -4375, -835, 718, -292, 12098, -756, -281, 17100, 8337, 9554, 12588, 8549, -8942, -150, 1408, -2230, 2545, -3472, -2574, 2425, 2179, 14013, 167, -491, 10695, -775, 774, 10117, -301, -85, 18082, -21, 2104, 20427, 1156, -4256, -3385, 1250, -6922, 14405, 406, -626, 113, -5177, -3647, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025663909036666155, 0.00018616611487232149, 0.00012219193740747869, 0.00015658614574931562, 0.0001989878510357812, 0.00023581698769703507, 0.00031321105780079961, 0.00019785499898716807, 0.00020752502314280719, 0.00015637424075976014, 8.4435298049356788e-05, 0.00026991445338353515, 0.00023353550932370126, 0.00012356035585980862, 0.00012053771934006363, 0.00013017618039157242, 0.00010605050920275971, 0.00019644129497464746, 0.00015466808690689504, 0.00011331259884173051, 0.00015945579798426479, 0.00026686850469559431, 0.00017624943575356156, 0.00018220061610918492, 0.00063592282822355628, 0.00017407984705641866, 0.00026709638768807054, 0.00011793559679063037, 0.00020367954857647419, 7.8887591371312737e-05, 0.00028461977490223944, 0.00019713961228262633, 0.00013604738342110068, 0.00018762070976663381, 0.00024575580027885735, 0.00039910091436468065, 0.0001634615910006687, 0.00030434993095695972, 0.000297654012683779, 0.00010304716852260754, 0.00019372397218830884, 0.0002054235665127635, 0.00018922191520687193, 0.00010044084774563089, 8.6191437731031328e-05, 9.5329713076353073e-05, 0.0001761321909725666, 0.00010189523891313002, 0.00021879556879866868, 8.4068473370280117e-05, 9.1356007033027709e-05, 0.00012347880692686886, 0.00019476732995826751, 0.00012451666407287121, 0.00020301614131312817, 0.00014255270070862025, 0.00018577800074126571, 0.0001917025656439364, 0.00013070582645013928, 0.00011116221867268905, 0.00013214083446655422, 0.00016361083544325083, 0.00012231728760525584, 0.00010877593012992293, 0.00019807854550890625, 0.00019454397261142731, 0.00028444349300116301, 0.00021350872702896595, 0.00020102869893889874, 0.00015993173292372376, 0.00021009625925216824, 0.00012469272769521922, 8.3887556684203446e-05, 0.00023200946452561766, 0.00025689337053336203, 0.00011684455967042595, 0.00014522096898872405, 0.00017765779921319336, 0.00013472269347403198, 0.00016125336696859449, 0.00024258140183519572, 8.8132066593971103e-05, 0.0001953524915734306, 0.00016364669136237353, 6.3068502640817314e-05, 0.00018655967141967267, 0.00015620283375028521, 0.00020188021881040186, 0.00021372843184508383, 0.00017683324404060841, 8.4184379375074059e-05, 0.00036445012665353715, 0.00020017895440105349, 0.00025989054120145738, 0.00011178695422131568, 0.00030784370028413832, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 31,114,1,23,-35,5,43,37,56,-68,-76,43,-8,-15,30,-52,-72,12,11,19,45,72,83,103,17,0,-42,1,-6,18,19,-25,-54,-3,-35,87,-5,37,3,-12,23,-38,-1,27,-101,-59,16,-28,-15,-100,-44,4,18,52,-21,-9,-72,-61,-52,-127,-127,8,-94,-2,-24,39,33,-15,-19,37,31,-2,-22,12,47,-2,8,-43,-74,19,2,-81,53,-29,-90,-41,-14,15,-119,18,-80,36,72,-4,65,5, -36,-41,3,95,-12,94,-20,-7,60,29,-127,74,-23,-66,-89,127,-88,58,42,84,127,19,115,127,32,25,21,55,7,127,-9,-127,59,73,6,38,71,87,-23,-127,127,-11,96,127,-55,-99,127,-71,-8,-127,-127,-19,16,127,-27,-127,8,31,-115,-81,-52,-127,-49,91,-29,83,110,-26,5,127,127,1,-60,30,-33,-90,33,-63,-14,127,-5,-56,127,-63,-127,-40,91,49,97,105,-82,0,127,-26,127,33, 22,-111,7,10,-21,-10,-10,42,23,66,-67,22,-5,35,9,-80,-19,9,2,12,42,56,64,100,21,-19,28,43,8,20,-9,-60,-49,-81,-37,61,-1,2,16,12,-6,28,-13,59,-36,-34,5,4,21,-78,3,17,8,-19,12,1,55,-75,-12,-66,-91,32,-70,-12,39,8,-52,-8,-22,-11,7,15,-5,-34,-6,11,6,-18,-70,-7,4,-82,31,-11,-25,-28,-6,-16,-91,4,-17,34,22,42,16,-6, 
  /* [0][1][][] */ 94,-11,55,114,2,-52,127,36,-26,-127,-119,127,4,-127,-51,33,-72,-52,65,18,-98,2,-127,-81,-12,54,-127,127,-80,75,127,66,28,58,8,127,-127,64,-14,-63,60,-127,26,58,-127,-66,0,-127,-103,-100,-126,20,127,-71,87,-23,-127,1,-71,-7,-60,-61,-36,44,-91,-21,91,-90,-47,37,-47,-127,-127,59,127,-73,94,65,-102,-55,127,-127,-35,109,-41,-10,11,80,-10,30,-71,22,-8,-88,75,-9, -127,0,-54,127,-84,-127,-110,-127,71,-3,-79,34,-84,-113,-48,115,-127,-127,127,127,29,-127,-114,93,-127,127,6,76,-83,-33,-102,71,-127,76,127,-28,35,127,127,-96,-44,24,28,41,-45,-127,-80,-108,-1,-114,-107,127,44,82,62,-80,23,25,84,-33,-34,-36,-127,127,-7,-127,127,127,22,77,-102,-79,-34,49,-116,-127,127,127,83,-58,-87,10,-103,69,-97,-90,127,127,127,127,-127,-127,-93,-61,88,127, 57,-17,93,64,4,-24,9,26,-44,99,-92,66,13,-12,-127,69,9,-39,21,-7,-99,4,-81,-83,-2,23,115,-10,127,103,17,-112,-32,-127,-18,127,-119,9,-27,-47,-11,99,27,99,-14,-12,-11,-77,127,-89,-82,4,65,-101,-127,24,103,0,-127,57,-23,-38,0,45,127,-45,-35,-10,-56,-4,-41,-48,-125,-127,-10,-47,-11,-32,-127,-52,-75,-115,-23,127,-103,12,4,0,-33,-7,-9,37,-17,127,21,-11, 
  /* [0][2][][] */ 35,-127,32,-18,9,21,33,53,-35,-49,-1,-43,19,-2,4,40,-21,15,-5,31,-9,45,15,-36,22,36,-12,-9,-21,13,6,17,-18,-11,-29,-8,53,2,5,-19,1,18,-10,-43,-10,-23,-20,-15,-8,37,-34,23,-16,-9,-31,-17,-8,-8,-3,22,-35,-4,43,-3,-24,48,-55,-24,22,9,7,73,-24,9,19,7,-42,-39,-11,0,8,-31,-21,-42,-72,36,-22,-10,-87,46,-3,18,-9,-3,2,-11, -47,5,127,-11,127,75,-26,14,-127,9,-90,-50,127,-14,-54,35,5,48,-1,-58,10,12,62,-12,70,-53,-14,28,-15,100,-12,13,-77,30,8,-40,78,44,26,-91,-21,2,-127,14,-4,2,-45,-58,0,-52,-54,79,86,-78,-30,-74,-16,127,-36,3,84,-117,85,75,-19,24,-45,12,127,-10,3,91,-86,12,-23,-47,-17,-87,-34,-39,-10,-63,-34,-64,-72,127,27,3,89,43,33,20,-26,-17,-9,0, 15,86,20,-32,0,-7,-13,43,9,55,14,-5,9,7,-3,42,-26,3,-3,27,-21,34,3,-32,12,29,7,24,10,28,-19,-76,-39,-17,-21,-15,43,-20,3,-2,-3,-5,10,0,-21,-7,-20,-5,23,41,-19,6,-14,-23,13,6,7,4,3,51,-30,20,30,-12,37,14,-82,17,18,3,2,72,12,-20,-10,3,-22,-17,-1,-2,-4,-62,-16,-17,-47,27,-31,-18,-81,44,10,14,-15,6,-10,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012629192322492599, 0.0091612217947840691, 0.0060130571946501732, 0.0077055934816598892, 0.0097921788692474365, 0.011604538187384605, 0.015413094311952591, 0.0097364308312535286, 0.010212291963398457, 0.0076951654627919197, 0.0041550551541149616, 0.013282471336424351, 0.011492266319692135, 0.0060803969390690327, 0.0059316530823707581, 0.0064059612341225147, 0.0052187382243573666, 0.0096668628975749016, 0.0076112058013677597, 0.005576105322688818, 0.0078468089923262596, 0.013132580555975437, 0.0086732227355241776, 0.0089660799130797386, 0.031293720006942749, 0.0085664577782154083, 0.013143795542418957, 0.0058036027476191521, 0.010023056529462337, 0.0038820530753582716, 0.014006120152771473, 0.0097012268379330635, 0.0066948826424777508, 0.0092328023165464401, 0.012093625962734222, 0.019639728590846062, 0.0080439336597919464, 0.014977039769291878, 0.014647534117102623, 0.0050709443166851997, 0.0095331436023116112, 0.010108879767358303, 0.0093115977942943573, 0.0049426872283220291, 0.0042414749041199684, 0.0046911686658859253, 0.0086674531921744347, 0.0050142579711973667, 0.010766915045678616, 0.0041370037943124771, 0.004495623055845499, 0.0060763834044337273, 0.0095844874158501625, 0.0061274566687643528, 0.0099904108792543411, 0.0070150089450180531, 0.0091421231627464294, 0.0094336699694395065, 0.0064320247620344162, 0.0054702851921319962, 0.0065026413649320602, 0.0080512780696153641, 0.0060192253440618515, 0.0053528561256825924, 0.0097474316135048866, 0.0095734959468245506, 0.01399744488298893, 0.010506750084459782, 0.0098926089704036713, 0.0078702298924326897, 0.01033882237970829, 0.0061361207626760006, 0.0041281008161604404, 0.01141717005521059, 0.012641705572605133, 0.0057499129325151443, 0.0071463142521679401, 0.008742528036236763, 0.0066296947188675404, 0.0079352669417858124, 0.011937414295971394, 0.0043369731865823269, 0.0096132829785346985, 0.0080530429258942604, 0.0031035966239869595, 0.0091805886477231979, 0.0076867309398949146, 0.0099345119670033455, 0.010517561808228493, 0.0087019521743059158, 0.0041427076794207096, 0.017934566363692284, 0.0098507925868034363, 0.012789196334779263, 0.0055010286159813404, 0.015148967504501343, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 8826, 6354, 1473, -1496, 7128, 16994, 11418, 2523, -459, 12652, 1390, -5966, 4383, 5074, 532, -687, 5465, 10642, -655, -28, 5824, 15505, 12747, -2205, -4767, -1322, 16680, -190, 2075, 1718, 11262, -2465, 11447, 3670, 4925, -6004, 1120, -5870, 71, 3022, 3756, 1929, 2275, -619, 1216, 2551, 6481, 6710, 5716, 3690, 8809, 3481, -3644, 2320, 1512, 3257, 2514, 3441, 13338, 1722, -1282, 7637, 7293, 5454, 4838, 8806, -6499, 3815, 7476, -832, 8958, 2416, 5926, 4744, 5596, 3410, -644, 2980, 3773, 4420, 4036, 4991, 11303, 1143, 3943, 6337, 1060, -1275, 21856, -540, 971, -1875, 15686, 4564, -61, -1661, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.3725615695584565e-05, 5.9882022469537333e-05, 9.9207740277051926e-05, 0.00012877045082859695, 9.8943186458200216e-05, 4.7669265768490732e-05, 7.1104012022260576e-05, 0.00011559107952052727, 0.0001258181146113202, 6.2995066400617361e-05, 0.00014855420158710331, 7.8193974331952631e-05, 0.00011682375043164939, 9.5582545327488333e-05, 0.00012237303599249572, 0.00010246523743262514, 0.00011188197822775692, 7.1316906542051584e-05, 7.6943666499573737e-05, 0.00012252126180101186, 0.00010093832679558545, 5.8323661505710334e-05, 6.6904714913107455e-05, 0.00012209158740006387, 0.00011729939433280379, 9.8107935627922416e-05, 5.4488267778651789e-05, 9.2464630142785609e-05, 0.00011896607611561194, 0.00010831096005858853, 7.3373681516386569e-05, 0.00010472858411958441, 6.7422413849271834e-05, 0.00012967563816346228, 0.00014389451825991273, 0.00010421669867355376, 0.00011058645759476349, 9.946552017936483e-05, 0.00010351789387641475, 0.000100545039458666, 0.00011583905143197626, 0.00012940882879775017, 0.00014441931853070855, 0.00014306548109743744, 0.00020252575632184744, 0.00014404466492123902, 8.7548891315236688e-05, 9.4236158474814147e-05, 9.8852557130157948e-05, 0.00013444048818200827, 8.2769991422537714e-05, 0.00011826065747300163, 9.7670046670828015e-05, 0.00015822515706531703, 0.0001493531308369711, 0.00012167287786724046, 0.00012833066284656525, 0.00010931188444374129, 6.0890091845067218e-05, 0.0001151438191300258, 0.00015333379269577563, 9.2536087322514504e-05, 7.9223922512028366e-05, 0.00010740433208411559, 0.00011362614168319851, 8.272610284620896e-05, 9.0561210527084768e-05, 0.00011147530312882736, 8.3912374975625426e-05, 0.00015153065032791346, 7.8541386756114662e-05, 8.5442166891880333e-05, 7.58569804020226e-05, 9.0540757810231298e-05, 9.9219447292853147e-05, 8.3903192717116326e-05, 0.00013976480113342404, 0.00012403923028614372, 0.00010156138887396082, 0.00011925303988391533, 0.00010908063995884731, 8.8038657850120217e-05, 6.6104446887038648e-05, 0.00010997741628671065, 8.9851280790753663e-05, 0.00010521445801714435, 0.0001283489546040073, 0.00016259594121947885, 4.3572425056481734e-05, 0.00012592892744578421, 0.00016456302546430379, 0.00010857443703571334, 5.3854957513976842e-05, 9.324787970399484e-05, 0.00015617563622072339, 9.0641973656602204e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -53,46,-18,-31,-35,-52,-58,-30,63,-56,46,-51,90,-109,11,-127, 
  /* [1][0][][] */ -102,69,-109,-115,-86,27,-17,56,-43,8,93,-48,46,127,25,42, 
  /* [2][0][][] */ -40,-6,-72,11,-8,-51,25,-36,-94,127,76,13,45,62,-41,114, 
  /* [3][0][][] */ -47,-75,12,-37,-83,5,-59,-127,-6,16,37,-72,-72,-44,-121,-47, 
  /* [4][0][][] */ 77,5,-19,36,-66,-8,-127,43,15,66,21,55,6,8,-43,-84, 
  /* [5][0][][] */ -95,60,-83,-27,57,-65,-21,-86,94,-34,8,-48,15,-127,-123,-101, 
  /* [6][0][][] */ -8,-42,-30,29,-92,73,36,-37,-17,-54,127,-29,-1,-6,-124,6, 
  /* [7][0][][] */ -35,115,127,-92,57,86,-8,-63,44,63,-93,-22,57,1,22,72, 
  /* [8][0][][] */ -40,-2,32,-1,56,2,84,127,-72,-16,-71,-82,37,84,-60,-65, 
  /* [9][0][][] */ 37,52,90,18,-118,-35,-88,-115,66,13,127,21,-35,-98,51,-19, 
  /* [10][0][][] */ -17,-113,2,-80,-127,73,33,31,-29,-50,-1,32,-11,53,-115,19, 
  /* [11][0][][] */ 127,-67,-18,92,-123,-31,63,-3,127,116,-47,42,32,-88,-12,119, 
  /* [12][0][][] */ -55,-67,127,-5,53,-23,18,60,59,-23,87,73,-33,14,-83,29, 
  /* [13][0][][] */ -9,-28,15,19,8,14,127,32,-99,7,14,6,-18,115,88,-65, 
  /* [14][0][][] */ 123,-92,127,1,78,64,111,59,90,68,60,41,68,-51,31,-52, 
  /* [15][0][][] */ -5,119,5,-46,39,127,-78,72,-48,-27,-40,-17,-45,122,-22,-54, 
  /* [16][0][][] */ -43,59,106,-50,18,84,3,-3,-12,15,-10,41,93,6,94,127, 
  /* [17][0][][] */ 15,104,75,-127,26,-47,11,-73,-60,79,-21,58,-67,-23,107,-53, 
  /* [18][0][][] */ -88,-3,-79,-94,111,83,-42,-69,48,80,127,71,-4,105,-47,-4, 
  /* [19][0][][] */ 51,127,90,68,50,-32,-15,2,-30,123,41,114,59,68,-54,41, 
  /* [20][0][][] */ 103,-7,7,72,-64,-13,-35,55,-30,-47,-127,-36,84,-45,34,-12, 
  /* [21][0][][] */ -81,-69,-19,110,-23,-1,-127,65,10,1,25,19,-42,27,-59,4, 
  /* [22][0][][] */ 0,-3,-58,-42,127,-4,-37,55,58,68,34,65,-22,20,-9,25, 
  /* [23][0][][] */ -66,24,-12,16,17,53,93,84,-22,127,-24,-24,-7,32,-53,-27, 
  /* [24][0][][] */ 33,-77,43,3,127,29,73,-33,50,22,46,26,-62,32,-3,-13, 
  /* [25][0][][] */ 127,-66,73,17,7,-4,-30,92,119,-27,-51,13,125,-53,99,46, 
  /* [26][0][][] */ 57,43,105,83,71,-14,-60,-21,1,67,18,127,28,-68,29,-55, 
  /* [27][0][][] */ -48,43,-66,28,-34,98,14,-82,24,-89,115,27,33,-41,127,107, 
  /* [28][0][][] */ -47,35,-76,-127,29,-79,5,-57,-100,90,-55,26,-21,32,-29,72, 
  /* [29][0][][] */ 86,105,-83,40,28,91,-43,-19,46,54,13,59,-127,20,-20,85, 
  /* [30][0][][] */ -26,74,-116,-55,73,-42,14,16,-53,54,-70,-9,6,58,-9,127, 
  /* [31][0][][] */ 19,-111,78,44,68,-62,-76,40,-25,7,20,-41,-68,59,32,127, 
  /* [32][0][][] */ -51,65,4,45,-94,48,11,58,21,-127,22,-81,25,36,32,54, 
  /* [33][0][][] */ -75,-7,57,85,-7,22,-46,17,-39,-46,16,-18,-5,-7,7,127, 
  /* [34][0][][] */ -11,9,-83,-90,57,-13,-7,61,16,-10,0,-12,-54,-20,-32,127, 
  /* [35][0][][] */ 66,-5,25,-13,-5,20,-72,-25,-20,-127,-49,9,-2,-28,43,-23, 
  /* [36][0][][] */ -7,24,-125,-19,39,127,-13,37,-21,9,56,23,17,23,-84,44, 
  /* [37][0][][] */ 47,44,66,-52,61,-127,40,-24,-99,58,-85,-21,3,14,89,39, 
  /* [38][0][][] */ -33,127,36,-40,36,24,69,-95,13,5,-117,41,-59,-100,-82,13, 
  /* [39][0][][] */ 84,46,-122,-124,-15,-32,10,-61,4,-1,-1,-38,64,13,-127,-74, 
  /* [40][0][][] */ -33,18,-76,-83,-44,-13,18,-127,-4,-11,2,-33,40,67,34,57, 
  /* [41][0][][] */ -39,-89,-13,127,-4,-16,-65,-9,-7,-57,73,-65,-66,-5,5,27, 
  /* [42][0][][] */ -16,62,-24,-127,16,22,4,-33,60,1,-46,21,75,-24,-14,8, 
  /* [43][0][][] */ 0,42,0,13,127,30,27,23,9,39,2,-81,-109,-40,-20,-12, 
  /* [44][0][][] */ 73,-17,23,35,-31,-9,5,37,24,-33,30,7,127,9,-44,-34, 
  /* [45][0][][] */ 18,-77,-64,32,-43,-80,9,48,25,-18,16,27,-75,127,44,-36, 
  /* [46][0][][] */ -10,-98,55,88,5,-11,-119,63,41,-53,48,-18,28,73,91,127, 
  /* [47][0][][] */ -38,-53,20,74,2,-6,53,20,9,-63,-127,-33,42,-36,-63,19, 
  /* [48][0][][] */ -80,88,-21,-32,-1,61,-4,-127,22,-28,43,-56,55,-120,-51,3, 
  /* [49][0][][] */ -64,11,48,-34,7,5,127,123,-26,-34,-9,25,-52,27,-56,34, 
  /* [50][0][][] */ 50,16,-84,29,32,-127,-43,-1,-79,58,-39,-6,25,-81,-117,-56, 
  /* [51][0][][] */ -45,60,-29,115,-40,40,-50,-72,-45,-80,-3,-48,-3,28,-8,127, 
  /* [52][0][][] */ -127,10,26,2,23,42,59,12,10,-90,-49,-38,-113,-64,-117,-6, 
  /* [53][0][][] */ -51,-67,-58,-127,-41,-2,14,75,33,-68,-43,23,-27,31,60,105, 
  /* [54][0][][] */ 7,-58,-5,-12,-61,66,58,-20,-14,-82,49,27,-14,-15,-127,36, 
  /* [55][0][][] */ -18,-28,-39,34,67,-27,68,88,-60,-64,-127,-41,67,-31,-29,44, 
  /* [56][0][][] */ 65,-39,-56,-31,-127,18,-110,-6,-7,-20,-35,7,103,-45,46,13, 
  /* [57][0][][] */ -46,8,25,-26,127,35,45,45,-36,48,-5,-5,-60,66,-96,-28, 
  /* [58][0][][] */ 21,3,6,-23,43,-15,-45,-62,45,-127,-70,6,-80,-47,-32,59, 
  /* [59][0][][] */ -78,-23,-5,4,22,59,-94,-50,82,127,-80,12,-19,7,-24,6, 
  /* [60][0][][] */ 21,-53,-6,13,-127,-43,30,9,-6,42,-16,43,1,-42,38,37, 
  /* [61][0][][] */ 21,36,-83,-14,-45,-22,-127,-85,-22,10,42,113,66,-60,104,64, 
  /* [62][0][][] */ 55,-23,43,-28,-21,39,47,127,-58,126,25,84,37,34,84,105, 
  /* [63][0][][] */ 22,-118,-10,-13,-70,11,46,-24,-12,-25,2,-11,-39,127,105,38, 
  /* [64][0][][] */ -12,-10,-127,-39,14,54,33,-18,-5,-93,45,-2,70,-41,-62,103, 
  /* [65][0][][] */ -3,-1,67,62,82,-24,85,92,-46,-10,-127,-77,29,115,-72,-12, 
  /* [66][0][][] */ -47,-123,-7,-102,-67,-127,55,-37,-3,-48,27,84,-65,-44,-76,90, 
  /* [67][0][][] */ -35,-93,-84,-34,-81,120,0,-127,-86,-27,-42,-103,16,-12,-68,43, 
  /* [68][0][][] */ 127,42,22,-7,-82,11,-70,-48,-77,-108,-22,-9,31,-21,71,-63, 
  /* [69][0][][] */ 31,7,48,-23,-3,-45,-43,24,-13,127,-28,8,0,33,62,-23, 
  /* [70][0][][] */ 47,-10,-29,79,-125,32,-16,-100,101,127,33,68,49,-58,-1,24, 
  /* [71][0][][] */ 117,-75,80,102,-84,-38,48,-33,127,5,-52,37,78,-75,20,13, 
  /* [72][0][][] */ -12,-41,50,109,57,-5,-127,86,94,-15,45,7,-53,-82,-83,97, 
  /* [73][0][][] */ 62,13,58,-127,64,-87,-74,56,-20,112,-28,8,18,-74,34,-39, 
  /* [74][0][][] */ 87,15,31,40,-127,-24,43,1,-79,-38,14,-46,32,-65,4,21, 
  /* [75][0][][] */ 91,127,-114,16,62,66,-24,-28,-23,-23,53,82,-114,61,66,77, 
  /* [76][0][][] */ -67,-34,3,-40,-50,-10,89,-6,-58,20,95,48,-56,-127,-24,94, 
  /* [77][0][][] */ -47,127,-30,9,-64,-70,37,84,37,-58,-9,73,-25,61,0,77, 
  /* [78][0][][] */ 123,40,-56,35,-75,28,-127,-17,-5,-12,-77,15,25,-108,27,62, 
  /* [79][0][][] */ -64,-42,122,52,-29,-91,-52,-45,-29,17,20,23,-69,127,-50,74, 
  /* [80][0][][] */ 62,102,21,-127,-16,31,92,-30,8,20,-39,25,79,-49,7,2, 
  /* [81][0][][] */ 37,-63,17,-119,97,44,-8,127,115,26,-22,-55,-19,14,-99,-67, 
  /* [82][0][][] */ 90,42,75,6,127,-109,22,53,2,104,-42,33,-18,-46,44,-111, 
  /* [83][0][][] */ -44,75,12,8,90,61,127,103,-4,44,-24,-74,-82,95,-62,-92, 
  /* [84][0][][] */ 5,-103,-5,104,4,-91,-83,45,-90,72,-69,-11,-127,70,-7,-64, 
  /* [85][0][][] */ -113,62,-38,-15,-19,-41,-43,-45,-22,38,24,-81,-127,-81,-80,53, 
  /* [86][0][][] */ -18,70,107,126,34,-38,60,19,6,30,-54,-80,34,78,-127,-68, 
  /* [87][0][][] */ -20,50,127,-24,-98,-30,22,14,31,-22,13,46,-49,23,-5,-3, 
  /* [88][0][][] */ -27,-81,-118,33,47,36,-7,22,-22,-83,-127,-114,127,-20,5,47, 
  /* [89][0][][] */ 37,19,19,-122,6,-70,-58,58,127,-12,20,-101,2,-39,65,-85, 
  /* [90][0][][] */ 5,65,20,8,-38,42,33,115,3,-53,-8,127,50,16,-37,73, 
  /* [91][0][][] */ -57,-2,-24,67,80,51,-44,-105,-36,39,-11,9,-107,-127,-56,-19, 
  /* [92][0][][] */ -24,61,5,-14,-127,-3,-88,57,-34,59,84,78,-20,-25,67,4, 
  /* [93][0][][] */ 103,47,93,40,-127,-73,20,27,-24,-64,-20,-72,29,-50,-13,-3, 
  /* [94][0][][] */ -33,-127,29,-103,17,34,-23,1,86,-24,0,60,12,58,-53,42, 
  /* [95][0][][] */ -39,-66,-25,-55,127,113,-37,43,94,42,-78,62,-35,125,-79,35, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001609984552487731, 0.0011514890938997269, 0.0019076948519796133, 0.0024761648382991552, 0.0019026077352464199, 0.00091664638603106141, 0.001367280026897788, 0.0022227349691092968, 0.0024193937424570322, 0.0012113506672903895, 0.0028565926477313042, 0.001503614941611886, 0.002246438292786479, 0.0018379850080236793, 0.0023531471379101276, 0.0019703342113643885, 0.0021514114923775196, 0.0013713737716898322, 0.0014795723836869001, 0.0023559974506497383, 0.0019409728702157736, 0.0011215228587388992, 0.0012865305179730058, 0.0023477352224290371, 0.002255584578961134, 0.001886546378955245, 0.0010477709583938122, 0.0017780296038836241, 0.0022876337170600891, 0.0020827434491366148, 0.0014109241310507059, 0.002013856777921319, 0.0012964854249730706, 0.0024935710243880749, 0.002766990102827549, 0.002004013629630208, 0.0021264995448291302, 0.0019126518163830042, 0.0019905760418623686, 0.0019334101816639304, 0.002227503340691328, 0.0024884406011551619, 0.0027770816814154387, 0.0027510484214872122, 0.0038944275584071875, 0.0027698774356395006, 0.0016835035057738423, 0.0018120948225259781, 0.0019008649978786707, 0.0025851957034319639, 0.0015916085103526711, 0.0022740690037608147, 0.0018781261751428246, 0.0030425582081079483, 0.0028719555120915174, 0.0023396837059408426, 0.002467708196491003, 0.0021019903942942619, 0.0011708735255524516, 0.0022141344379633665, 0.00294850068166852, 0.0017794036539271474, 0.0015234202146530151, 0.0020653095562011003, 0.0021849505137652159, 0.0015907646156847477, 0.0017414281610399485, 0.0021435914095491171, 0.0016135757323354483, 0.0029138275422155857, 0.0015102954348549247, 0.0016429926035925746, 0.0014586761826649308, 0.0017410349100828171, 0.0019079199992120266, 0.0016133992467075586, 0.0026875785551965237, 0.0023851869627833366, 0.0019529538694769144, 0.0022931518033146858, 0.0020975437946617603, 0.0016929212724789977, 0.0012711419258266687, 0.0021147881634533405, 0.001727776718325913, 0.0020231998059898615, 0.002468060003593564, 0.0031266054138541222, 0.00083786697359755635, 0.0024215243756771088, 0.0031644308473914862, 0.002087809843942523, 0.0010355928679928184, 0.0017930909525603056, 0.0030031474307179451, 0.0017429812578484416, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -26903, -4696, 3328, -13278, 13344, -12949, 23231, -9421, 12261, -9595, 12928, 11397, -3316, -29827, 562, 3815, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.9407905761618167e-05, 5.9111291193403304e-05, 6.9377405452542007e-05, 6.9133886427152902e-05, 9.0881068899761885e-05, 0.0001421427441528067, 5.6638848036527634e-05, 5.9025900554843247e-05, 0.00010939205822069198, 9.6338284492958337e-05, 9.6058138296939433e-05, 7.9275610914919525e-05, 8.2063415902666748e-05, 8.13544902484864e-05, 6.7387234594207257e-05, 7.3186711233574897e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 17,25,14,14,-14,-69,-9,-3,-19,-74,14,-9,51,-68,55,32,-88,-28,38,10,82,17,-68,8,-4,60,127,68,16,73,54,-36,8,5,12,-26,28,22,-11,-4,115,14,25,-20,-5,-9,0,-38,29,-33,94,-4,-66,-1,41,34,-5,-40,10,17,-7,32,-60,-10,16,-2,66,28,-1,-19,21,30,9,32,10,29,60,-30,47,22,-15,50,33,32,-56,13,-4,68,14,7,-87,-21,23,13,100,67, 
  /* [1][0][][] */ 22,36,-50,-17,-6,-46,89,-72,-65,-37,-59,-50,-7,-46,-7,-54,-34,-21,-33,-18,-17,-89,110,-35,2,14,4,63,-48,5,-38,12,-33,24,12,6,-24,51,-60,83,33,14,3,-43,56,-59,-11,33,-79,-4,48,-106,-43,45,58,62,30,28,-67,17,-46,1,-17,-17,30,25,103,6,-43,-127,9,7,25,68,-24,37,-52,-25,104,-25,39,-10,51,-61,-31,-57,-14,17,-16,-48,30,-3,66,-54,-34,55, 
  /* [2][0][][] */ 11,-20,15,-6,64,40,-52,25,-53,40,17,-23,36,-8,23,26,31,-23,-127,-6,-18,-44,-15,19,-2,-13,-46,18,-33,-22,-19,70,-19,-33,-2,13,-41,22,-20,-22,67,14,6,38,9,57,8,-9,-83,2,-21,14,-21,44,10,-58,36,19,39,29,-27,-14,-18,51,37,-4,-31,-5,-7,-2,-10,-38,18,48,28,65,-57,-13,-23,-37,32,30,49,-18,-9,-39,-16,-51,-14,-31,-16,66,0,-5,85,-39, 
  /* [3][0][][] */ 40,-39,-22,-113,-7,-33,118,-31,27,127,-76,-16,7,-24,-19,66,63,41,-28,14,-55,19,18,3,-49,81,50,-10,-46,-10,-73,62,-4,-26,26,-25,7,-53,-23,62,7,8,-22,20,61,-53,-1,33,53,-31,25,-42,107,41,27,-9,3,-19,-12,-46,-41,34,67,-6,-28,-30,121,-38,-43,-21,-49,23,11,-79,4,-81,15,-50,126,-4,-7,-61,-36,-52,-32,-44,80,77,-39,49,-58,2,5,-84,-19,34, 
  /* [4][0][][] */ -32,78,35,11,-14,12,-33,-24,16,-29,-1,-16,20,40,-26,25,-12,-44,-16,-68,31,-31,-58,19,-25,-38,-21,17,-41,127,-47,-14,8,-40,0,-29,73,45,-33,4,17,7,11,-40,-51,-8,49,-21,22,-13,-59,-6,-68,30,42,21,7,58,-19,22,-29,-67,-29,8,55,27,-65,-5,2,1,5,-71,-10,59,51,62,-30,20,-63,41,17,64,30,-59,40,-66,-26,-67,-41,-49,-46,-13,-4,5,29,-32, 
  /* [5][0][][] */ -7,-13,35,-21,-14,-19,-18,5,34,10,-15,-1,-20,-29,25,-17,-14,5,-50,-36,-24,12,-19,9,19,-45,64,-19,-1,41,8,73,-9,-84,18,11,-37,-26,-30,-1,-52,-4,-20,13,2,17,-73,22,-17,18,46,-13,25,-71,3,15,-25,-57,6,-36,37,22,23,42,-41,6,107,-25,-4,-22,13,18,-5,27,34,9,-4,-17,127,40,-21,-13,-30,25,40,61,6,91,4,-36,-5,8,9,-11,-31,21, 
  /* [6][0][][] */ 25,-57,76,19,-39,119,-48,-108,-20,-87,-93,67,13,11,-38,88,12,39,14,-40,-87,-20,-91,-62,0,-49,-9,75,-127,51,-17,-28,45,97,-17,-1,1,-44,24,-23,-64,46,29,-36,20,50,-97,-11,50,9,-83,-119,86,3,-39,-20,27,-32,28,-26,-13,-46,38,1,63,-76,-71,-62,-99,19,-15,-88,-36,-107,27,-106,86,6,-79,41,-37,85,23,-103,70,-51,-22,-1,-78,86,-90,95,49,-55,76,-104, 
  /* [7][0][][] */ -14,-16,-64,57,-28,0,41,1,-106,1,89,53,-7,-61,3,-37,-15,1,0,-2,-52,-20,-40,-41,75,44,-2,76,3,28,23,28,-57,-127,33,105,-6,13,-46,7,-4,-16,7,-76,32,61,66,85,-11,51,-46,5,30,-48,45,-55,-18,31,-78,-22,62,8,11,-39,71,-52,113,-21,-59,-23,74,7,-15,-28,-79,-26,32,-44,102,-34,-2,-9,-81,-40,45,25,-71,48,-11,19,1,28,69,-2,84,-7, 
  /* [8][0][][] */ -12,-56,11,3,-11,-3,17,-6,-12,-2,43,39,11,25,-42,-2,65,-6,17,2,-10,-70,-30,-19,-21,-37,70,2,-18,48,8,-32,-11,0,3,2,-46,-17,13,-22,-2,37,25,-37,10,-20,21,-14,36,1,49,5,-7,14,-41,0,-15,105,-54,-1,-10,-56,-60,-3,-83,-34,-19,18,-10,13,34,-19,-23,-127,42,-101,13,17,-59,21,-25,-7,4,60,59,-58,-36,48,-36,81,14,-22,-50,0,-6,-63, 
  /* [9][0][][] */ -24,-30,-30,25,2,17,1,41,-42,0,66,58,-27,53,28,-50,-15,36,-23,-41,-2,38,-7,7,-26,26,5,18,36,-10,12,-6,-19,-19,6,53,-19,-8,26,-3,-13,-25,13,-1,11,47,5,38,-42,6,-17,28,127,18,-13,-1,14,-16,30,14,-34,0,79,8,13,20,64,5,30,-4,-18,26,3,-122,-40,-120,-35,-15,42,-5,-5,31,1,-44,45,18,-57,-3,-1,109,35,29,50,37,-10,32, 
  /* [10][0][][] */ 24,39,10,-5,-19,12,-43,-18,61,5,-33,23,15,9,-1,-56,-28,3,19,0,20,-15,-21,-32,10,-15,-92,43,-17,48,-5,10,16,25,-16,1,11,1,5,-4,37,-12,56,-40,-26,1,18,24,19,1,8,-26,-18,-15,-4,31,-14,5,-15,-10,-15,-39,-3,8,-5,-17,-88,-31,-52,-14,46,-12,-22,28,32,17,45,-22,-90,12,-8,29,-2,-7,10,11,-71,-127,-20,28,8,19,48,-26,21,33, 
  /* [11][0][][] */ 19,-42,2,4,-60,31,16,10,72,-19,-18,-44,20,7,15,-13,-27,51,24,-60,8,31,16,-22,40,15,59,0,32,-59,-25,17,17,104,-95,3,11,-14,53,9,-46,45,-13,17,-41,3,-12,-4,50,-17,-21,-17,-20,14,-79,94,-31,1,-3,-33,25,0,-7,-67,-6,-43,-127,-79,-4,-31,-86,33,48,20,-7,1,35,52,-110,-34,-11,-2,-17,-6,-19,-1,55,76,20,-49,6,6,-32,30,82,31, 
  /* [12][0][][] */ 23,23,-38,-28,11,-27,2,39,51,-36,23,-1,-3,-15,-1,8,12,-38,-25,10,7,52,0,47,-41,-33,-127,-8,76,-26,25,-5,-22,-72,65,-8,33,-13,-1,15,-7,-55,18,30,46,1,23,-18,-67,-5,-52,91,76,-26,28,-74,5,19,-41,-35,11,47,74,2,-17,-20,31,21,105,28,26,30,0,-15,-12,-7,-38,-59,46,-63,24,-50,28,-42,7,9,3,-101,-4,33,-39,18,12,70,15,43, 
  /* [13][0][][] */ -13,19,-69,29,24,16,-13,9,27,64,-38,45,-44,-22,67,-52,15,51,58,13,-32,-44,-9,13,40,50,-23,26,7,37,51,-16,-19,63,-5,50,20,-40,-49,-53,0,-10,17,15,48,54,-27,45,-50,33,-3,2,-13,-43,60,37,12,-47,-16,-17,20,17,6,-30,13,86,127,34,25,2,-45,-17,36,52,-82,52,15,-75,126,-43,-14,-37,21,-3,33,54,-36,-24,-12,-21,6,50,38,17,65,57, 
  /* [14][0][][] */ -10,51,19,22,-62,-44,18,43,-74,-26,76,7,-82,-11,72,-24,-48,35,-60,26,-22,21,-97,11,-47,-1,-54,-110,16,-6,27,80,-58,32,20,-19,-28,-71,-12,-43,29,-33,51,-25,-10,50,-75,28,-10,-42,82,27,-12,26,-30,32,-59,30,1,39,37,62,-6,41,15,-49,3,-68,38,64,76,39,-51,35,13,10,30,-13,38,19,-70,121,-3,-127,83,1,-1,11,-106,-16,-22,-6,-25,15,38,33, 
  /* [15][0][][] */ 75,-30,26,30,37,4,-14,-9,19,35,-58,-12,70,71,-6,-17,-10,8,-78,51,1,-30,18,27,66,-36,92,24,44,-27,-44,65,68,54,-5,-79,66,75,72,56,94,39,-19,3,-42,-124,38,-34,-34,-20,-19,-5,-8,-53,-31,56,-10,11,-14,21,2,-51,-34,34,45,47,-83,40,-5,-37,-8,-7,-1,-123,-48,-101,-20,20,-127,37,86,-33,54,31,-56,-2,-5,-21,38,90,17,-61,-31,-32,35,-39, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0037998359184712172, 0.0025122298393398523, 0.0029485397972166538, 0.002938190009444952, 0.003862445242702961, 0.0060410667210817337, 0.0024071510415524244, 0.0025086007080972195, 0.0046491622924804688, 0.0040943771600723267, 0.0040824706666171551, 0.0033692133147269487, 0.0034876952413469553, 0.0034575657919049263, 0.0028639573138207197, 0.0031104350928217173, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12732, -1136, -6698, 9422, -577, 1342, -472, -1498, 2397, -5470, -113, -2386, 12845, -4052, -3020, -8505, 329, 430, -13231, 743, -3148, -831, -9432, -687, 30, 10972, -11940, -5924, -276, -3780, -765, -750, 23437, 532, -2004, -655, -262, 16335, 5607, 13146, -84, 6861, 367, 6859, -133, -775, 10525, 2763, -7163, 11, -4295, -557, -519, -4234, -152, 3027, 951, 2054, 985, 1117, -740, -257, 145, 9408, 10399, -783, 17745, 11341, -911, -219, 11352, -1440, 126, 685, -4903, -448, 22069, 13195, 15149, 15222, 19670, -1844, 10603, 11096, -1821, -903, 12352, -8769, 11871, -209, -11081, -1688, -28, 162, 25858, -1638, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 8.046701259445399e-05, 0.00023118883837014437, 0.00014540865959133953, 0.00010674809163901955, 0.00016722998407203704, 0.00036038219695910811, 9.2982503701932728e-05, 0.00015379414253402501, 0.00030732023878954351, 0.00017433476750738919, 0.00019742551376111805, 0.00019382919708732516, 6.7858200054615736e-05, 0.00013650397886522114, 0.00017304504581261426, 0.00013147380377631634, 0.0002249378158012405, 0.00024298520293086767, 9.4058348622638732e-05, 0.00028266539447940886, 0.0001829775283113122, 0.00019232169142924249, 7.7511125709861517e-05, 0.0001117992214858532, 0.0017363488441333175, 0.00011006244312739, 0.0001916124892886728, 0.00013554234465118498, 0.00020243128528818488, 0.00014014486805535853, 0.00013037194730713964, 0.0002164796314900741, 5.6425807997584343e-05, 0.00040544915827922523, 0.00011726408411050215, 0.0002022713451879099, 0.00026347991661168635, 6.9361420173663646e-05, 0.00016126353875733912, 9.685059922048822e-05, 0.00046483392361551523, 0.00015865826571825892, 0.00020571383356582373, 0.00012188731489004567, 0.00014216857380233705, 0.00026915399939753115, 0.00011516834638314322, 0.00019402535690460354, 0.00014300615293905139, 0.00029018789064139128, 0.0002061802806565538, 0.0001621598785277456, 0.0001192080817418173, 0.00022864564380142838, 0.00023952146875672042, 0.00019341014558449388, 0.00014819679199717939, 0.00031844220939092338, 0.00031216221395879984, 0.00026997970417141914, 0.00019239709945395589, 0.00022251367045100778, 0.00012264697579666972, 0.00010022402420872822, 0.00022772597731091082, 0.00033370818709954619, 9.3451533757615834e-05, 0.00011797387560363859, 0.00017850847507361323, 0.00024233318981714547, 0.00011971477215411142, 0.00019730761414393783, 0.00045993670937605202, 0.00013622634287457913, 0.000127862484077923, 0.00017304340144619346, 6.1593724240083247e-05, 0.00012707219866570085, 8.9718778326641768e-05, 0.00012575247092172503, 6.4104664488695562e-05, 0.00022256786178331822, 8.4770370449405164e-05, 0.00024712758022360504, 8.3743194409180433e-05, 0.00022776213882025331, 0.00011079962132498622, 0.00017580373969394714, 0.00010277344699716195, 0.00018641648057382554, 7.1697788371238858e-05, 0.00019787324708886445, 0.00023981949198059738, 0.00011081129923695698, 6.8640321842394769e-05, 0.00022387945500668138, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -36,-12,-2,-39,98,-6,32,-15,-7,0,-11,-24,-33,2,-2,-23,-15,3,-8,-21,-5,29,5,41,-3,-19,-30,2,20,0,28,1,-10,2,-10,-25,-2,-74,-52,-7,3,-11,37,-24,-26,39,-55,-20,-26,10,-7,53,-63,7,39,-14,-1,-7,1,-15,-4,-12,-10,-40,-15,-19,-44,-35,-16,24,3,3,24,6,-3,4,-18,10,127,-22,-126,11,-105,-25,-30,-14,26,8,-25,-17,10,-30,-2,34,-15,9, -19,33,43,-79,-37,-3,127,-58,-2,-11,-38,7,-72,5,-85,71,-8,73,72,-35,-2,127,79,125,30,-2,40,61,127,33,127,-33,-111,-18,-96,-30,-21,-98,127,-60,-24,-127,-13,-46,57,-28,-27,-9,36,4,20,127,-95,40,-74,-6,-73,-3,-9,26,-7,-127,-125,-56,-42,1,-9,-83,-12,14,-55,110,-127,-10,10,-25,-127,-72,-8,-77,-127,10,33,-63,102,76,-53,28,-127,-1,33,-11,12,127,-41,-87, -26,-2,-7,-20,62,-5,50,-28,-20,15,-12,-5,-12,2,-3,-33,-13,-3,-16,-29,-6,11,7,32,-4,-13,-4,-15,10,4,19,7,-12,1,-20,58,-3,-58,-47,6,0,-13,18,-10,-14,-22,-44,-28,-19,-4,-5,37,2,-1,13,-12,51,-14,4,-20,-5,-6,-55,-12,-21,-31,127,-23,-7,18,8,13,13,10,1,22,-11,20,-43,-11,-95,5,-104,-21,0,-25,20,-22,-32,-35,6,53,7,32,-12,14, 
  /* [0][1][][] */ -88,-5,39,-60,48,97,-43,-16,-2,-15,-24,-15,-127,23,23,65,-19,38,106,17,26,-14,122,-24,38,26,61,13,-13,4,-4,-17,-127,-20,67,-15,-10,-127,-69,-127,-19,2,84,-27,-70,127,-83,-82,58,56,16,-42,-113,71,56,-29,17,-27,30,-8,15,-4,87,-78,-34,16,-30,-60,-9,-4,-127,12,65,127,9,-72,-117,-61,-60,-53,-82,-6,-28,-58,46,17,-101,59,-61,127,97,-88,127,7,-59,-5, 79,127,127,127,-127,-127,92,-60,127,127,-78,-54,-89,127,-26,127,127,-127,127,127,127,-76,102,-127,-127,-127,127,127,-122,127,-22,127,-68,127,127,-93,127,106,2,-24,127,5,-127,-104,127,-23,127,127,127,-127,127,-110,117,127,-127,127,-127,127,-127,127,-102,117,99,-127,127,127,-18,127,-107,-127,-29,-127,9,120,127,73,2,-127,94,-127,82,127,127,127,127,57,-127,127,-89,52,-5,-29,-97,-19,-127,-34, -127,-30,36,-74,10,54,-57,4,-33,-16,-3,127,-109,17,25,60,-26,46,74,3,13,-18,91,-24,38,16,40,1,-14,-4,16,-13,-96,-35,81,127,-3,-101,-89,-77,-29,-15,20,-33,-62,-61,-79,-111,44,60,-1,-25,127,12,89,-47,90,-24,44,-37,3,-30,-127,-33,-65,-8,-56,-70,-18,5,-107,0,29,-94,9,127,-82,-44,-57,-3,-107,-15,-66,-75,3,21,-83,38,-26,-75,127,127,-46,-18,-70,-8, 
  /* [0][2][][] */ -29,-36,-14,-11,35,-1,-5,23,-8,9,33,-23,57,-1,-5,-28,-5,-8,-38,-25,-15,-9,15,-19,4,-12,-6,0,3,-7,-21,8,-7,-5,-1,-18,-3,-45,-26,-2,-28,4,22,14,23,14,-59,-3,-24,2,-18,-14,-4,-35,28,-16,6,-15,3,-13,0,17,7,0,-36,-19,115,19,29,26,2,-2,-11,-15,-6,-25,-12,13,-26,-28,-39,3,-92,-17,-4,-8,32,-7,13,7,-1,-15,-17,-10,-34,-1, -36,-54,27,-92,-41,0,50,127,-51,68,127,-19,-59,19,127,88,-12,-32,76,-52,-23,-31,127,17,20,-18,38,9,-8,5,-87,-41,-73,-34,-103,-2,-85,-113,43,-51,-25,-98,-39,127,29,-18,-50,-6,27,-9,-10,-5,63,24,-48,-42,-46,-44,39,-47,127,24,105,4,-83,-45,-24,-47,127,32,-32,15,17,-26,23,-25,-20,-42,2,30,-107,-24,-79,-74,40,-127,-14,17,-13,4,49,2,10,-111,-81,127, -31,9,-12,4,26,-10,0,20,-18,1,14,42,65,-4,-5,-31,-7,7,-11,-32,-13,-1,13,-7,-3,-11,-8,-11,-2,-1,-28,7,4,-2,-1,4,-7,-58,-36,10,-34,3,-4,10,20,-2,-57,5,-21,-7,-12,-11,5,-38,26,-16,54,-8,7,-17,4,21,-9,17,-26,-22,-25,22,24,14,-7,-1,-51,-34,-7,-17,-22,6,95,-16,-33,-3,-63,0,-11,-3,38,7,18,1,-6,20,-1,-15,-28,-4, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0046555469743907452, 0.013375798240303993, 0.0084128491580486298, 0.0061760805547237396, 0.0096753565594553947, 0.020850485190749168, 0.005379650741815567, 0.0088980048894882202, 0.017780501395463943, 0.010086415335536003, 0.011422366835176945, 0.011214296333491802, 0.0039260438643395901, 0.0078976545482873917, 0.010011795908212662, 0.0076066255569458008, 0.013014134950935841, 0.014058295637369156, 0.0054418952204287052, 0.01635405607521534, 0.010586455464363098, 0.011127077043056488, 0.0044845296069979668, 0.0064683216623961926, 0.10045922547578812, 0.0063678375445306301, 0.011086044833064079, 0.0078420182690024376, 0.011711983941495419, 0.0081083038821816444, 0.007542876061052084, 0.012524773366749287, 0.0032646048348397017, 0.023457905277609825, 0.0067845000885426998, 0.011702730320394039, 0.015244049020111561, 0.0040130154229700565, 0.0093301581218838692, 0.00560344522818923, 0.026893705129623413, 0.0091794263571500778, 0.011901901103556156, 0.0070519843138754368, 0.0082253888249397278, 0.01557233277708292, 0.0066632479429244995, 0.011225645430386066, 0.008273848332464695, 0.016789281740784645, 0.011928888037800789, 0.0093820178881287575, 0.0068969731219112873, 0.013228657655417919, 0.013857895508408546, 0.011190051212906837, 0.0085741607472300529, 0.018423980101943016, 0.01806064136326313, 0.015620104968547821, 0.011131440289318562, 0.012873882427811623, 0.0070959357544779778, 0.0057986201718449593, 0.013175448402762413, 0.019307218492031097, 0.0054067871533334255, 0.006825566291809082, 0.010327891446650028, 0.014020572416484356, 0.0069262883625924587, 0.011415545828640461, 0.026610368862748146, 0.0078815920278429985, 0.0073976870626211166, 0.010011700913310051, 0.0035636029206216335, 0.007351964246481657, 0.0051908227615058422, 0.0072756088338792324, 0.0037088773678988218, 0.012877017259597778, 0.0049045244231820107, 0.014297959394752979, 0.0048450957983732224, 0.013177541084587574, 0.0064104883931577206, 0.010171405039727688, 0.0059461211785674095, 0.010785422287881374, 0.0041481894440948963, 0.011448271572589874, 0.013875138014554977, 0.0064111640676856041, 0.0039712949655950069, 0.012952901422977448, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1743, 9024, 347, 2203, 5564, 17660, 128, 3255, 15766, -1492, 21847, 4956, 2283, 578, 7866, 622, 4000, 5860, -496, 15646, 1460, 10045, -1565, 1990, -12372, 1834, 2902, 2392, 7850, 1480, 4361, 4870, 2137, 16198, 5259, 4927, 4982, 2858, 5409, 3506, 21480, 1875, 2872, 1996, 3220, 12255, 10212, 9578, 1525, -1155, 2005, 8794, 3105, -3439, 8200, 303, 2987, 18983, 2041, 2494, 3267, 13188, 4278, -405, 23601, 16403, 2397, 4956, 8322, 6135, 2298, 1927, -4491, 5031, 2742, 3903, 416, 13500, 4699, 8411, 3580, 1610, 5917, 19128, -190, 11351, 8237, 2028, -874, 3193, 1788, 15519, 4301, 3922, 6495, 5915, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018017561524175107, 8.2782775280065835e-05, 0.00023740854521747679, 0.00016902750940062106, 0.00011688193626469001, 5.1944763981737196e-05, 0.00019230431644245982, 0.00010353353718528524, 5.5072017858037725e-05, 0.00012522087490651757, 3.865711551043205e-05, 9.4993360107764602e-05, 0.00013477487664204091, 0.00027344940463081002, 7.0367379521485418e-05, 0.00010672557255020365, 0.00015169230755418539, 0.00010471663699718192, 0.00011737702152458951, 5.8321729738963768e-05, 0.000165708435815759, 7.4471368861850351e-05, 0.00015512060781475157, 0.0001208735557156615, 6.1558101151604205e-05, 0.00010788063809741288, 0.00016493121802341193, 0.00015321790124289691, 0.00010798657604027539, 0.0001757970021571964, 0.00012996680743526667, 0.00011126472236355767, 0.0001963489776244387, 5.4543215810554102e-05, 0.00010137430217582732, 0.00012179199984529987, 0.00011873656330863014, 0.00015173824795056134, 9.6099502115976065e-05, 0.00012242815864738077, 4.3975123844575137e-05, 0.00015411563799716532, 0.00013261103595141321, 0.00010433943680254743, 0.00011500651453388855, 6.7739863879978657e-05, 7.0025853347033262e-05, 7.821461622370407e-05, 0.00018523308972362429, 0.00017613390809856355, 0.0001967637799680233, 7.9391335020773113e-05, 0.00015271801385097206, 0.00011518631799845025, 9.2010006483178586e-05, 0.00022379566507879645, 0.00011278985039098188, 4.7229568735929206e-05, 0.00010329168435418978, 0.00010997339268215001, 0.00013143410615157336, 6.4481893787160516e-05, 0.0001418051979271695, 0.00018217213801108301, 4.0025759517448023e-05, 5.4026419093133882e-05, 0.0001799988531274721, 0.00012337193766143173, 9.216002217726782e-05, 8.4522929682862014e-05, 0.00021554990962613374, 0.00012238502677064389, 0.00012982008047401905, 0.00012469284411054105, 0.00013772519014310092, 0.000156614143634215, 0.00015569916286040097, 6.1473023379221559e-05, 0.00012642235378734767, 0.0001010840423987247, 0.00012307685392443091, 0.00010937669139821082, 8.7684944446664304e-05, 4.8976999096339568e-05, 9.1159643488936126e-05, 6.4239429775625467e-05, 8.6635969637427479e-05, 0.00019531950238160789, 0.00015447208716068417, 0.00017540801491122693, 0.00011780863133026287, 5.5143707868410274e-05, 0.0001226058229804039, 0.00010279173875460401, 8.8068321929313242e-05, 0.00010610573372105137, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 37,11,6,55,-127,-26,99,51,55,89,-27,36,10,0,29,87, 
  /* [1][0][][] */ -16,25,-97,7,127,100,-8,5,-30,14,-55,31,-59,88,-50,-37, 
  /* [2][0][][] */ -39,66,83,-1,67,86,6,40,41,-4,38,-16,54,-127,-6,10, 
  /* [3][0][][] */ 127,-35,19,3,30,34,-9,17,34,31,-54,-26,-39,52,-26,58, 
  /* [4][0][][] */ -72,-18,9,36,-118,-7,-87,-25,-13,30,-4,-49,-17,37,-37,127, 
  /* [5][0][][] */ -100,16,32,10,127,35,9,14,-53,34,-22,18,-71,60,-95,-35, 
  /* [6][0][][] */ -127,26,-38,30,-9,-72,77,18,9,-31,-54,38,9,0,-41,15, 
  /* [7][0][][] */ -8,108,47,-99,61,57,127,2,39,-5,4,38,81,20,-34,6, 
  /* [8][0][][] */ -29,-29,-74,52,-50,82,-50,-66,31,-39,79,36,127,43,-96,5, 
  /* [9][0][][] */ -19,-127,-13,82,-35,-57,-11,52,54,49,4,68,-69,12,-7,-38, 
  /* [10][0][][] */ -38,-43,-105,46,-119,127,65,-90,14,-66,59,-45,43,99,-84,76, 
  /* [11][0][][] */ -46,-121,-48,24,-16,104,28,-14,24,10,42,-108,22,113,-122,127, 
  /* [12][0][][] */ -35,-101,-87,100,-106,-127,16,67,76,65,-31,99,-2,-61,-28,-2, 
  /* [13][0][][] */ -67,-22,-34,-4,-14,4,33,13,-18,127,-11,-23,39,30,13,-13, 
  /* [14][0][][] */ -127,-23,-59,-56,-27,97,-19,-104,120,-74,82,-9,87,-53,-93,-84, 
  /* [15][0][][] */ 0,-127,102,-55,-56,-38,10,57,16,-50,-97,-42,89,-46,-31,-50, 
  /* [16][0][][] */ -20,-38,30,-36,36,22,-24,-28,69,-127,35,-15,-9,-2,-76,-99, 
  /* [17][0][][] */ -17,4,33,-67,19,-3,-37,0,92,-63,27,77,118,-78,-24,-127, 
  /* [18][0][][] */ 75,2,-33,-117,9,-29,118,-50,31,64,-13,65,-10,71,-10,-127, 
  /* [19][0][][] */ -32,-30,-24,-65,-110,41,-19,-4,35,-43,21,-127,-15,-25,-22,-9, 
  /* [20][0][][] */ 24,70,71,-95,69,-7,-47,96,-107,-127,33,-80,-35,116,-16,-18, 
  /* [21][0][][] */ 23,-127,-127,4,112,33,85,116,-82,-90,-35,27,124,-126,-26,19, 
  /* [22][0][][] */ 62,-13,73,-5,9,3,58,30,28,127,30,25,-7,0,109,-8, 
  /* [23][0][][] */ -116,-79,-18,69,72,44,15,8,-2,13,-7,-91,3,66,67,127, 
  /* [24][0][][] */ 19,-16,39,29,22,-92,15,-60,19,127,-112,83,-19,-59,86,-66, 
  /* [25][0][][] */ 127,-58,112,122,46,14,-12,30,-108,83,51,-52,-11,21,70,-19, 
  /* [26][0][][] */ -19,27,13,43,-53,111,-18,40,-56,-33,-82,35,0,18,45,-127, 
  /* [27][0][][] */ 36,-8,-11,-51,-50,5,-83,10,-109,-26,-66,-45,-74,46,-20,127, 
  /* [28][0][][] */ -61,11,26,4,26,-17,-127,6,1,-30,-7,-8,7,-52,-67,-36, 
  /* [29][0][][] */ -22,-119,-22,98,-27,7,127,9,82,59,-115,68,31,-28,-49,75, 
  /* [30][0][][] */ 44,-51,-56,8,-127,23,55,-31,10,-6,0,-21,-12,43,-6,69, 
  /* [31][0][][] */ -127,-15,3,87,-35,11,-47,-2,-28,-53,15,-33,-20,-50,-19,97, 
  /* [32][0][][] */ -127,-87,-96,-8,-98,-55,-1,-9,120,57,-55,-64,38,49,39,-15, 
  /* [33][0][][] */ -12,12,-83,42,-127,-88,55,-12,-113,14,-54,-59,-24,92,67,67, 
  /* [34][0][][] */ 34,55,1,34,-69,-42,35,15,17,-127,-14,34,-22,5,45,94, 
  /* [35][0][][] */ 43,-7,-60,-19,-127,13,84,-35,29,49,-18,-13,21,64,34,57, 
  /* [36][0][][] */ -9,-2,-54,58,127,-16,47,65,-84,16,-83,-83,26,-19,6,31, 
  /* [37][0][][] */ -127,50,-6,-79,43,-90,-41,-39,-14,-26,-22,47,63,-81,18,-123, 
  /* [38][0][][] */ 37,106,31,-79,-111,-65,-127,-56,-46,-76,53,66,-82,-98,86,-2, 
  /* [39][0][][] */ -5,-48,13,76,8,80,95,-55,-31,47,17,-28,-16,127,57,127, 
  /* [40][0][][] */ 104,40,75,86,-52,-57,2,30,-80,64,-6,-10,-43,-19,127,6, 
  /* [41][0][][] */ -24,-16,5,49,-95,117,3,48,-56,24,-106,6,22,29,46,-127, 
  /* [42][0][][] */ 14,-104,30,-13,127,25,57,15,-21,-92,-97,-20,-20,-17,-6,29, 
  /* [43][0][][] */ -38,-97,-36,13,116,11,-6,98,-75,-67,-127,-78,107,-4,-55,63, 
  /* [44][0][][] */ -38,-59,-81,-96,28,81,61,9,-29,-127,-58,64,-46,48,32,98, 
  /* [45][0][][] */ -11,-61,-71,-15,-127,75,-22,-63,58,-49,27,-52,5,14,-44,47, 
  /* [46][0][][] */ 27,-90,-16,8,85,-88,-14,102,-9,-32,41,63,-56,-54,64,-127, 
  /* [47][0][][] */ -70,-24,-5,86,-1,4,29,38,4,127,72,89,-43,77,-4,93, 
  /* [48][0][][] */ 45,-13,-76,-84,35,-65,6,53,46,-72,-5,26,-58,3,-44,-127, 
  /* [49][0][][] */ 50,33,5,27,-8,-21,51,48,-35,127,-34,40,-40,-23,71,87, 
  /* [50][0][][] */ 9,-1,13,10,-127,-19,-13,-45,57,21,21,56,-22,-60,20,-1, 
  /* [51][0][][] */ 20,-2,-7,-127,-28,91,51,-55,13,8,29,-46,73,69,-23,10, 
  /* [52][0][][] */ 18,-22,-5,-84,75,-103,-6,-38,33,-5,127,-58,39,6,-36,92, 
  /* [53][0][][] */ -44,-64,45,-21,-40,-127,15,-97,-6,85,-89,81,-37,-14,31,-78, 
  /* [54][0][][] */ 56,67,45,-20,-127,-35,-83,-103,-11,11,50,68,-69,-41,55,13, 
  /* [55][0][][] */ 17,15,-40,70,-39,28,41,-21,2,127,22,58,0,-2,2,48, 
  /* [56][0][][] */ 37,-117,-84,80,-82,49,-5,65,127,6,62,49,-31,-32,47,99, 
  /* [57][0][][] */ 51,14,109,-82,91,-10,-11,-3,88,-31,2,127,56,-55,105,-65, 
  /* [58][0][][] */ 87,-65,18,-69,42,12,-9,127,59,100,-13,58,47,10,85,-9, 
  /* [59][0][][] */ -49,38,32,-42,0,-88,3,4,5,16,-114,-102,-127,-54,70,-13, 
  /* [60][0][][] */ 39,-27,24,16,10,-18,14,-54,23,127,-8,68,-9,-23,-16,-30, 
  /* [61][0][][] */ 62,70,11,-30,-93,-127,-15,-67,-70,-19,-18,17,-69,-40,85,94, 
  /* [62][0][][] */ -29,88,-42,35,-55,127,-41,21,-59,4,-34,26,-27,41,54,-80, 
  /* [63][0][][] */ 37,-3,-65,-127,-16,-51,88,-12,-1,-95,-34,38,-43,78,37,-34, 
  /* [64][0][][] */ -35,15,20,-21,64,-73,25,93,-127,-10,-87,-32,-30,94,72,59, 
  /* [65][0][][] */ -81,-20,-45,-27,83,38,-56,-88,-127,-50,2,-35,-125,108,-58,46, 
  /* [66][0][][] */ -16,56,-9,34,-47,127,-20,24,-62,17,-28,42,-32,48,50,-82, 
  /* [67][0][][] */ 19,-29,-44,-29,11,-95,63,-94,-8,31,9,121,-69,-29,-19,-127, 
  /* [68][0][][] */ 5,-127,-32,72,-14,4,28,93,37,36,61,10,-74,38,-10,-6, 
  /* [69][0][][] */ 6,93,88,-127,50,-2,-35,106,30,111,64,94,99,-100,37,-124, 
  /* [70][0][][] */ 40,31,41,-39,90,11,-93,-54,-127,-92,1,42,-30,59,-107,-4, 
  /* [71][0][][] */ -15,-74,33,-37,74,-17,32,35,-75,83,-127,-44,9,83,-18,40, 
  /* [72][0][][] */ 9,19,59,8,-64,-22,-107,-72,-10,63,-21,59,33,116,-127,-2, 
  /* [73][0][][] */ -3,-32,-20,-39,36,-111,28,-47,70,85,110,-15,18,-21,-73,127, 
  /* [74][0][][] */ 8,0,-25,88,-80,-8,95,29,82,67,26,121,127,27,-56,7, 
  /* [75][0][][] */ -34,47,-24,34,-51,127,-20,20,-34,33,-36,43,-24,53,27,-68, 
  /* [76][0][][] */ -72,83,-59,43,-105,-7,-10,23,52,48,-47,-49,47,-51,-127,40, 
  /* [77][0][][] */ 109,106,-127,119,72,83,68,52,43,5,111,-46,74,27,71,26, 
  /* [78][0][][] */ 13,-40,-3,-63,66,-119,29,-55,49,44,127,-28,8,-20,-42,123, 
  /* [79][0][][] */ -41,54,-1,18,-6,-43,-35,-3,-127,-9,54,5,99,42,-73,-40, 
  /* [80][0][][] */ -76,25,84,-3,69,47,-3,-127,-80,65,-76,-43,-2,-91,37,64, 
  /* [81][0][][] */ 86,78,-23,-1,31,-28,84,121,-114,127,-63,-44,-51,29,123,125, 
  /* [82][0][][] */ 57,108,-26,-67,-6,-55,111,-95,33,26,-74,77,127,-14,73,-56, 
  /* [83][0][][] */ 3,-36,15,23,-1,30,-33,-106,65,-36,97,11,36,-72,-55,-127, 
  /* [84][0][][] */ -127,-92,-46,-25,-9,105,94,5,92,70,107,103,64,88,-78,11, 
  /* [85][0][][] */ 115,-3,87,-81,64,-11,-24,91,9,111,-51,7,-41,68,127,26, 
  /* [86][0][][] */ -71,64,-37,-5,27,84,19,21,87,36,127,-21,-22,65,-5,-18, 
  /* [87][0][][] */ 12,-54,27,-42,45,-127,25,-29,46,-8,61,-34,31,-42,-37,68, 
  /* [88][0][][] */ -81,55,40,-6,111,-29,36,27,-65,-77,107,-70,78,122,111,-127, 
  /* [89][0][][] */ -27,33,-16,24,-35,127,-15,30,-47,8,-36,18,-4,57,26,-81, 
  /* [90][0][][] */ 51,-79,23,20,127,2,53,27,-9,-98,-121,-26,-11,-11,-64,30, 
  /* [91][0][][] */ -15,65,-30,-45,-5,-74,-91,28,-81,20,-104,-127,-115,-82,-8,22, 
  /* [92][0][][] */ 61,47,57,29,-127,-83,21,7,-25,26,-23,-35,-21,-76,22,0, 
  /* [93][0][][] */ 3,-127,-99,60,-42,-61,-23,111,97,72,0,64,-60,52,-9,-36, 
  /* [94][0][][] */ 96,14,127,-24,28,-37,16,35,26,88,-7,51,9,6,113,-14, 
  /* [95][0][][] */ -65,-42,-27,-28,127,-2,48,74,-40,-14,-101,-62,16,10,-72,34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0042348285205662251, 0.0019457174930721521, 0.0055800252594053745, 0.0039728046394884586, 0.0027471806388348341, 0.0012209041742607951, 0.004519900307059288, 0.0024334413465112448, 0.0012944068294018507, 0.0029431781731545925, 0.00090859277406707406, 0.002232713857665658, 0.0031677344813942909, 0.0064271260052919388, 0.0016539073549211025, 0.0025084665976464748, 0.0035653598606586456, 0.0024612487759441137, 0.0027588170487433672, 0.0013707877369597554, 0.0038947933353483677, 0.0017503672279417515, 0.0036459381226450205, 0.0028409992810338736, 0.0014468550216406584, 0.0025356151163578033, 0.0038765259087085724, 0.0036012174095958471, 0.0025381050072610378, 0.0041319141164422035, 0.0030547259375452995, 0.002615154255181551, 0.0046149655245244503, 0.0012819779803976417, 0.0023826907854527235, 0.0028625861741602421, 0.0027907716576009989, 0.0035664394963532686, 0.00225871242582798, 0.0028775385580956936, 0.0010335866827517748, 0.0036223174538463354, 0.0031168756540864706, 0.0024523830506950617, 0.0027031009085476398, 0.0015921505400910974, 0.0016458802856504917, 0.0018383479909971356, 0.0043536988086998463, 0.0041398326866328716, 0.0046247150748968124, 0.0018660054774954915, 0.0035894680768251419, 0.0027073270175606012, 0.0021625934168696404, 0.0052600693888962269, 0.0026510006282478571, 0.0011100787669420242, 0.0024277567863464355, 0.0025848029181361198, 0.003089213278144598, 0.0015155755681917071, 0.0033329743891954422, 0.0042817546054720879, 0.00094076123787090182, 0.0012698312057182193, 0.0042306738905608654, 0.0028997210320085287, 0.0021661194041371346, 0.0019866179209202528, 0.0050662620924413204, 0.002876524580642581, 0.0030512772500514984, 0.0029307673685252666, 0.0032370781991630793, 0.0036810422316193581, 0.0036595365963876247, 0.0014448554720729589, 0.0029714177362620831, 0.0023758686147630215, 0.0028927852399647236, 0.0025707781314849854, 0.0020609376952052116, 0.0011511502088978887, 0.0021426065359264612, 0.001509876805357635, 0.0020362825598567724, 0.0045907688327133656, 0.0036306953988969326, 0.0041227713227272034, 0.0027689614798873663, 0.0012960918247699738, 0.0028817141428589821, 0.0024160060565918684, 0.00206994847394526, 0.0024938979186117649, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5912, 12248, -24078, 2021, 15684, -18162, -49271, -10886, -6288, 8356, -18797, -15708, 8386, -13610, -4054, -3290, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00012970154057256877, 0.00010444338840898126, 0.0001241705467691645, 0.00011446829012129456, 7.8116936492733657e-05, 0.00012246983533259481, 8.7980777607299387e-05, 0.00010467604442965239, 8.3207916759420186e-05, 7.6614189310930669e-05, 0.00015148091188166291, 0.00013242085697129369, 0.00011379193892935291, 7.1087131800595671e-05, 0.00011571643699426204, 0.00011377743066987023, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 23,41,17,-34,69,69,-42,59,-17,117,1,44,-36,38,-16,44,31,80,42,-61,-67,73,-7,52,57,48,41,53,-46,-49,-11,88,-29,13,-67,53,50,-127,-31,13,16,-30,59,-8,-6,-55,-59,-16, 
  /* [1][0][][] */ -52,0,-80,-42,11,91,-58,18,-13,-33,-41,34,59,-15,-28,-27,-26,-30,-8,21,-66,42,-102,-44,-53,-36,45,69,-23,-26,43,-43,10,-56,-34,50,11,-55,127,-37,-24,28,-46,-17,33,53,32,19, 
  /* [2][0][][] */ -1,6,58,-31,-21,-84,16,26,100,78,-64,16,114,-52,127,81,-70,-20,-33,34,88,-85,-36,-101,9,-39,38,-70,44,48,-42,12,32,-25,62,44,-69,13,4,-32,30,32,69,-19,22,-89,100,-58, 
  /* [3][0][][] */ 38,1,-21,-27,34,110,19,-17,45,-51,25,-24,-54,11,9,41,-43,-67,37,-127,-11,-2,-24,-15,-43,95,126,65,-13,-43,29,44,59,-28,98,33,-47,-57,2,44,25,15,-13,-1,24,21,-13,-26, 
  /* [4][0][][] */ 103,-6,4,-51,90,89,48,15,73,-15,-110,27,40,-18,18,-12,-103,-127,-24,-95,-18,24,-37,-30,-82,123,-101,118,-59,-59,25,79,42,-55,20,-30,-7,10,-27,32,-48,-10,-4,52,-49,103,-30,-58, 
  /* [5][0][][] */ 0,-7,-53,6,-11,52,20,-28,64,52,39,90,50,-22,30,-4,-36,127,-16,36,8,0,-63,-15,35,1,-65,-33,-17,30,19,-18,-37,5,38,14,-46,7,-86,6,85,-21,27,47,-18,7,-40,32, 
  /* [6][0][][] */ 64,16,13,72,3,-25,102,-56,-1,69,127,103,45,44,-53,62,37,-44,-75,93,52,-64,-48,62,-85,90,92,-11,117,51,-32,-4,101,-68,-119,-4,104,33,3,2,16,61,56,-34,65,120,37,-2, 
  /* [7][0][][] */ -94,-3,-21,25,-57,-55,22,49,78,115,-56,-73,-100,13,-17,-14,-78,97,3,120,-47,43,26,41,-16,-92,-30,-78,28,37,-8,6,-15,14,14,-16,5,-60,127,15,7,43,23,-15,55,66,-27,0, 
  /* [8][0][][] */ -7,-88,49,-65,63,-56,69,-37,-24,-113,25,8,-36,3,32,32,-5,3,-47,105,6,38,-18,31,69,-14,-58,-38,-127,-26,-59,-110,11,-64,3,87,-4,30,111,20,19,-2,72,117,-11,-71,-46,76, 
  /* [9][0][][] */ 17,-40,23,-66,41,82,-37,47,16,-40,-34,-15,23,-45,116,-20,10,-115,37,41,-75,39,59,-40,-28,-77,-29,84,55,79,-38,-30,-55,36,-11,127,-30,-42,-59,-27,-32,-3,34,105,59,87,-71,17, 
  /* [10][0][][] */ -14,16,-24,-7,18,26,-61,-44,47,36,63,-5,-33,-11,46,-50,-57,127,1,47,-2,-11,16,25,-43,45,2,89,33,9,-31,-11,68,11,-10,24,-10,-43,-39,18,-80,-4,24,-17,15,43,28,34, 
  /* [11][0][][] */ -30,47,-16,35,32,53,0,10,17,19,-127,-69,68,21,-9,-45,-1,25,-44,-43,-11,-8,106,7,47,12,-16,35,-9,25,-9,49,27,-4,-47,2,40,79,102,22,32,-29,64,-2,-53,-20,86,6, 
  /* [12][0][][] */ -70,-4,32,23,-67,-60,5,-1,-42,-38,-127,19,71,-98,16,31,53,110,87,-126,-37,41,-46,-85,-4,-14,34,-31,8,19,-15,73,66,85,37,-38,-60,-26,30,-2,-37,14,59,-7,34,-13,-41,-34, 
  /* [13][0][][] */ -60,-122,-50,-102,8,21,61,9,-127,23,126,-61,60,42,124,2,123,29,-5,-102,76,-83,118,-1,-83,11,-31,16,-43,-97,-110,13,45,-25,-75,61,28,-53,82,-81,-11,54,68,42,59,-26,110,-62, 
  /* [14][0][][] */ 63,17,-55,6,-40,18,-83,-22,-32,62,56,47,-14,-60,12,-48,52,-113,20,8,90,-62,25,-2,-13,127,-91,6,-56,-26,-91,2,122,46,90,-23,-83,13,-20,57,-17,-45,105,-27,-53,-42,-54,52, 
  /* [15][0][][] */ -66,15,38,20,94,6,0,34,19,78,-16,56,58,-17,-36,-20,15,40,0,-39,28,-37,-51,-57,50,-65,-42,66,-32,8,16,8,-61,3,127,-6,-90,17,60,-18,-45,-21,21,-2,-34,-31,-12,9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0065673063509166241, 0.0052883853204548359, 0.0062872502021491528, 0.0057959859259426594, 0.0039553721435368061, 0.0062011359259486198, 0.0044548176229000092, 0.0053001656197011471, 0.0042131487280130386, 0.0038792819250375032, 0.0076700826175510883, 0.0067049963399767876, 0.0057617397978901863, 0.003599424846470356, 0.0058591845445334911, 0.0057610049843788147, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 14766, -1273, 19126, -548, 14834, -2191, 31824, 82, 12091, 29272, 3, 22124, 623, 10685, 35097, 22382, -270, -2688, 1967, 46151, -396, 19205, 2115, 17423, 18460, 29127, -185, -1255, -3020, 15836, 21280, 17, -557, -1135, 141, 16245, 11049, 29944, 2306, 16621, 25629, 965, 789, 16443, -481, -808, 41376, 21532, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.510351472068578e-05, 0.0001207155582960695, 6.8083798396401107e-05, 0.00014398385246749967, 0.00011858635843964294, 9.6778145234566182e-05, 6.2950559367891401e-05, 0.00024525928893126547, 0.00012289926235098392, 7.723754970356822e-05, 7.5631724030245095e-05, 9.4869348686188459e-05, 8.0168429121840745e-05, 0.00012652335863094777, 4.8832200263859704e-05, 9.1563022579066455e-05, 0.00012580050679389387, 7.8107615991029888e-05, 0.0001571923348819837, 4.8691839765524492e-05, 8.1322112237103283e-05, 6.5514024754520506e-05, 8.9481749455444515e-05, 0.00010487064719200134, 7.3470502684358507e-05, 9.0065383119508624e-05, 6.6635868279263377e-05, 4.485635508899577e-05, 0.00022889499086886644, 8.1765429058577865e-05, 6.2215891375672072e-05, 0.00027708229026757181, 0.00014921028923708946, 0.00016731288633309305, 9.5685012638568878e-05, 9.0755136625375599e-05, 9.5594390586484224e-05, 5.5616048484807834e-05, 9.1557361884042621e-05, 0.00011790558346547186, 5.7731387641979381e-05, 0.00018050431390292943, 0.0002923030115198344, 6.5716390963643789e-05, 0.00018434612138662487, 7.9922574514057487e-05, 4.7756682761246338e-05, 6.502476753666997e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -104,62,-127,92,-89,61,-43,81,-82,-64,59,-41,54,-68,-41,-49,76,67,87,-108,86,-115,68,-91,-89,-52,68,124,-95,-49,-97,83,68,-90,63,-106,-87,-114,82,-43,-4,-91,116,-92,99,54,-83,-44, -127,91,-68,110,-69,118,-43,99,-113,-88,92,-64,84,-96,-67,-72,103,102,127,-127,113,-121,86,-127,-103,-81,83,127,36,-73,-119,114,98,-127,97,-114,-105,-127,106,-69,-96,100,127,-110,-30,97,-102,-78, -60,50,3,23,-9,63,-20,31,-54,-36,43,-21,33,-36,-20,-16,43,44,68,-36,39,-56,28,-42,-73,-29,32,28,104,-27,-66,10,30,-79,41,-34,-34,-42,36,-37,-114,-31,41,-37,-62,55,-32,-48, 
  /* [0][1][][] */ -100,86,-82,109,-69,114,-108,102,-105,-95,83,-83,83,-99,-88,-95,97,91,-48,-110,103,-125,101,-86,-123,-84,92,104,-127,-89,-98,104,92,41,92,-116,-106,-96,102,-83,-104,-106,93,-123,127,67,-107,-93, -126,127,-119,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-54,-125,127,-127,127,-119,-127,-127,127,127,22,-127,-127,127,127,51,127,-127,-127,-95,127,-127,-127,127,102,-127,-49,127,-127,-127, -72,79,-84,35,-52,28,-61,67,-58,-35,57,-55,50,-52,-44,-19,65,58,-42,-34,39,-64,46,-55,-119,-51,52,52,115,-68,-63,43,39,20,53,-43,-40,-15,51,-64,-60,-59,21,-67,-79,72,-25,-75, 
  /* [0][2][][] */ -42,40,-6,44,-35,47,-51,37,-43,-33,23,-44,36,-57,-34,-53,49,37,-63,-18,24,-32,34,-40,-59,-39,40,-5,-74,-56,-30,16,32,60,44,-53,-52,-37,27,-39,-103,-45,26,-86,75,28,-61,-36, -71,64,-88,55,-68,32,-65,37,-55,-44,43,-68,53,-70,-52,-52,68,52,-80,-18,27,-35,40,-58,-70,-55,48,30,9,-83,-55,33,41,79,57,-58,-64,-33,34,-53,-64,64,27,-105,-26,52,-67,-56, -31,41,-73,10,-39,-9,-33,39,-9,-5,24,-29,26,-28,-18,2,37,23,-54,5,12,2,12,-19,-49,-23,30,22,67,-32,-13,-11,9,49,23,-8,-11,5,14,-19,-1,-21,-8,-34,-43,38,-10,-34, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036168992519378662, 0.0051304111257195473, 0.0028935614973306656, 0.0061193136498332024, 0.0050399200990796089, 0.0041130711324512959, 0.0026753987185657024, 0.010423519648611546, 0.0052232183516025543, 0.0032825956586748362, 0.0032143481075763702, 0.00403194734826684, 0.0034071581903845072, 0.0053772428072988987, 0.0020753685384988785, 0.0038914282340556383, 0.0053465212695300579, 0.0033195735886693001, 0.006680674385279417, 0.0020694031845778227, 0.0034561897628009319, 0.0027843459974974394, 0.0038029742427170277, 0.0044570025056600571, 0.003122496185824275, 0.0038277788553386927, 0.0028320243582129478, 0.0019063950749114156, 0.0097280368208885193, 0.0034750306513160467, 0.0026441754307597876, 0.011775996536016464, 0.0063414368778467178, 0.0071107978001236916, 0.0040666130371391773, 0.0038570931646972895, 0.004062761552631855, 0.0023636820260435343, 0.0038911879528313875, 0.0050109871663153172, 0.0024535839911550283, 0.0076714330352842808, 0.012422878295183182, 0.0027929465286433697, 0.0078347101807594299, 0.0033967094495892525, 0.0020296589937061071, 0.0027635525912046432, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2745, -1514, 944, -2466, 4720, -1065, 5035, -4759, 1619, 837, 2704, 5217, 578, -721, 661, 6069, -2618, 4821, 6665, 924, -1271, 3235, -1060, 8334, 2967, 2396, 1481, -1103, 10797, -457, 2980, -2984, -1146, 5078, -1538, 2387, 2985, 1315, 445, 5389, 2420, 10558, -5374, 2019, 8602, 237, 3087, 3476, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0001582081604283303, 0.00023128469183575362, 0.00023298361338675022, 0.00018131791148334742, 0.00016169258742593229, 0.00015050898946356028, 0.00014674256090074778, 0.00011453336628619581, 0.00019892657292075455, 0.00023713678820058703, 0.00015757099026814103, 0.0001457166945328936, 0.00018208107212558389, 0.00020103472343180329, 0.00022610803716816008, 0.000129994165035896, 0.00016503721417393535, 0.00016144636902026832, 0.00013048258551862091, 0.00025106934481300414, 0.00019416831491980702, 0.00016444244829472154, 0.00017185775504913181, 9.8053656984120607e-05, 0.00015812988567631692, 0.00017016008496284485, 0.00021018733968958259, 0.00020144530571997166, 8.543903095414862e-05, 0.00023086405417416245, 0.00014979066327214241, 0.00012417872494552284, 0.00014732650015503168, 0.00015542465553153306, 0.00014309087418951094, 0.00021476281108334661, 0.00014848590944893658, 0.0001723595050862059, 0.00017568799376022071, 0.00014550588093698025, 0.0002114995731972158, 8.339927444467321e-05, 0.00010677658428903669, 0.00020085045252926648, 9.7414224001113325e-05, 0.0001742249442031607, 0.00017696039867587388, 0.00016846451035235077, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 68,34,127,-33,68,101,-79,-52, 
  /* [1][0][][] */ 11,-86,-127,2,54,26,32,0, 
  /* [2][0][][] */ -127,-4,-44,-23,56,25,-72,-38, 
  /* [3][0][][] */ 42,67,127,-79,-7,-105,-5,-17, 
  /* [4][0][][] */ -127,25,-49,-22,48,13,-42,-56, 
  /* [5][0][][] */ -103,26,-54,-8,11,41,-84,-127, 
  /* [6][0][][] */ -39,-127,-119,46,103,12,5,49, 
  /* [7][0][][] */ -62,-127,-98,-75,-72,-65,19,88, 
  /* [8][0][][] */ 82,33,-10,-1,89,-73,-127,14, 
  /* [9][0][][] */ -36,50,-52,86,-62,-39,127,-33, 
  /* [10][0][][] */ -25,127,37,64,120,-24,-10,53, 
  /* [11][0][][] */ -80,-32,-22,-9,-82,100,127,-4, 
  /* [12][0][][] */ 66,37,-127,39,-6,-36,-67,-12, 
  /* [13][0][][] */ 60,-27,-65,12,15,-127,-31,-20, 
  /* [14][0][][] */ 5,-79,71,6,127,-110,-59,15, 
  /* [15][0][][] */ -40,-41,-1,127,58,77,-75,24, 
  /* [16][0][][] */ 114,30,-36,19,73,-103,-127,-26, 
  /* [17][0][][] */ 61,127,55,75,44,61,24,-87, 
  /* [18][0][][] */ 37,-14,0,-6,127,1,25,-15, 
  /* [19][0][][] */ 9,127,35,17,-114,18,27,-29, 
  /* [20][0][][] */ -42,20,67,-127,22,33,-14,102, 
  /* [21][0][][] */ -36,80,42,-127,35,47,-16,122, 
  /* [22][0][][] */ -73,-65,-93,20,-127,122,113,-25, 
  /* [23][0][][] */ 99,40,-127,23,12,-48,-75,-16, 
  /* [24][0][][] */ -56,47,10,9,-18,77,-127,106, 
  /* [25][0][][] */ -95,-52,-127,13,-55,-67,62,95, 
  /* [26][0][][] */ 48,-7,-37,-31,112,-16,127,-42, 
  /* [27][0][][] */ 127,-69,28,97,3,29,-23,95, 
  /* [28][0][][] */ 49,61,56,-8,127,-56,50,-27, 
  /* [29][0][][] */ -18,-10,-25,-47,-65,13,127,-32, 
  /* [30][0][][] */ 42,-127,-49,-67,-110,1,6,-56, 
  /* [31][0][][] */ 9,28,-6,-11,-127,5,-27,-10, 
  /* [32][0][][] */ 43,-58,-58,82,-5,-93,119,-127, 
  /* [33][0][][] */ 52,127,41,39,51,-23,-21,-20, 
  /* [34][0][][] */ -119,-35,127,-3,-24,101,92,11, 
  /* [35][0][][] */ -34,73,127,-16,-62,-67,-35,28, 
  /* [36][0][][] */ -95,9,100,-16,-14,127,74,28, 
  /* [37][0][][] */ -23,-81,-5,-127,-45,-78,73,47, 
  /* [38][0][][] */ 46,-17,86,-60,57,62,-127,10, 
  /* [39][0][][] */ -11,91,-127,-36,-20,3,1,83, 
  /* [40][0][][] */ 61,-49,20,33,13,-1,5,127, 
  /* [41][0][][] */ -29,84,127,-5,4,84,-70,26, 
  /* [42][0][][] */ 59,-127,-112,-23,-112,9,17,-88, 
  /* [43][0][][] */ -11,-79,25,-67,127,-41,19,39, 
  /* [44][0][][] */ 0,123,127,24,8,52,-72,3, 
  /* [45][0][][] */ -39,48,16,88,-118,59,-127,22, 
  /* [46][0][][] */ -44,-42,62,44,-127,-117,-28,-4, 
  /* [47][0][][] */ -24,65,49,-106,-127,42,-17,66, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0024251234717667103, 0.0035452907904982567, 0.0035713331308215857, 0.0027793655171990395, 0.0024785350542515516, 0.0023071053437888622, 0.0022493707947432995, 0.0017556461971253157, 0.0030492832884192467, 0.0036349957808852196, 0.0024153564590960741, 0.0022336456459015608, 0.0027910638600587845, 0.0030815985519438982, 0.0034659395460039377, 0.0019926398526877165, 0.0025298038963228464, 0.0024747608695179224, 0.0020001267548650503, 0.0038485636468976736, 0.0029763453640043736, 0.0025206869468092918, 0.0026343539357185364, 0.0015030339127406478, 0.0024239236954599619, 0.002608330687507987, 0.0032218960113823414, 0.003087892197072506, 0.0013096681796014309, 0.0035388430114835501, 0.0022960943169891834, 0.001903496915474534, 0.0022583219688385725, 0.0023824560921639204, 0.0021933952812105417, 0.0032920320518314838, 0.002276094164699316, 0.0026420450303703547, 0.0026930663734674454, 0.0022304141893982887, 0.0032420109491795301, 0.0012784014688804746, 0.0016367449425160885, 0.0030787738505750895, 0.0014932322083041072, 0.0026706396602094173, 0.00271257059648633, 0.0025823398027569056, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2899, 604, 22533, -4204, 5196, -14792, 2674, -15316, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.1379934272263199e-05, 0.00010672733333194628, 0.0001479487691540271, 0.00010454900620970875, 0.00013227399904280901, 0.00014018053479958326, 8.4450861322693527e-05, 9.0190842456649989e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-46,-23,-70,-2,-12,91,85,-96,-85,-34,7,-59,-8,-63,37,-87,14,11,127,56,-26,14,98,74,72,28,0,-95,-53,-83,-58,-48,103,34,-52,26,-35,95,-5,24,7,-1,-106,42,-32,-32,-84, 
  /* [1][0][][] */ -16,55,-21,-29,-74,57,-23,-50,-33,68,-22,15,53,44,-49,-7,-23,-119,75,-51,127,9,-65,22,55,-5,-85,65,37,-13,67,32,-29,-21,1,-10,-1,108,-16,-26,68,41,-8,12,104,15,-30,56, 
  /* [2][0][][] */ -25,-36,108,2,81,-40,-14,23,-33,-3,-10,45,6,-39,-43,-127,-50,-97,-22,17,-92,22,-37,-34,-49,18,0,-43,-40,4,-30,-10,-1,-7,24,-3,27,-28,-47,7,34,-29,31,-43,-44,-44,-63,-49, 
  /* [3][0][][] */ 50,19,62,10,15,-37,37,70,-51,-30,42,-28,-70,56,-21,49,65,34,-38,29,-113,-72,127,2,4,0,-62,-36,-56,69,116,-64,10,-116,-25,42,-15,-82,-17,74,-75,-62,61,-4,-99,-72,59,-6, 
  /* [4][0][][] */ 17,-20,69,-30,3,-7,-4,-4,-59,-8,-25,8,44,-69,41,-98,41,43,-7,-32,10,32,15,11,0,4,59,-17,23,20,-127,-12,-24,-23,6,17,46,-5,37,1,-39,-12,-67,28,-18,-99,0,21, 
  /* [5][0][][] */ 25,-45,61,28,29,15,26,-2,-72,-10,-49,26,32,5,11,-46,93,74,-6,-17,85,-61,127,-85,-15,41,1,43,8,14,-33,-48,-15,-44,-38,8,39,28,64,5,-76,25,30,26,49,-17,78,-1, 
  /* [6][0][][] */ -48,51,-127,84,49,22,40,19,-21,-10,59,-76,-93,-16,-28,30,-118,30,-8,92,20,46,-89,-88,-6,-21,29,72,-35,-40,-44,13,37,71,-45,-29,-16,-10,78,2,67,62,-116,-57,-38,116,-56,-36, 
  /* [7][0][][] */ 38,71,-77,19,19,64,117,72,40,79,-96,1,-45,5,-66,-47,34,36,119,104,83,3,127,22,101,101,-52,99,-68,31,-2,-73,15,-64,-20,23,4,99,-63,79,-60,51,-4,-78,82,-20,49,-37, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0034586470574140549, 0.0045359116047620773, 0.006287822499871254, 0.0044433325529098511, 0.0056216446682810783, 0.0059576728381216526, 0.0035891616716980934, 0.0038331106770783663, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 235, 10226, 17, -169, 1192, -1343, 1438, -1116, -4362, 231, -6955, -169, -25, -988, -2078, 4559, 8249, 887, 90, -3819, -6709, -372, 16784, -4892, -1447, -1063, 3865, -7107, -604, -164, -7901, 8952, 5366, -256, 3794, -18, -6, -419, 8947, 837, 6473, -2664, 2551, 5218, -1114, 7689, -967, 793, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026947911828756332, 0.00016098897322081029, 0.00071439729072153568, 0.00022616694332100451, 0.00021560268942266703, 0.0002741615753620863, 0.0002422106044832617, 0.00031247898004949093, 9.8716373031493276e-05, 0.00030325746047310531, 0.00020663964096456766, 0.0012649319833144546, 0.00045501056592911482, 0.00058865977916866541, 0.0003930862876586616, 0.00058311194879934192, 0.00014790960995014757, 6.9554800575133413e-05, 0.00022686387819703668, 0.00030990538652986288, 0.00025228870799764991, 0.00022280716802924871, 8.9793931692838669e-05, 0.00045474237413145602, 0.0001612744526937604, 0.00036706074024550617, 0.00048684325884096324, 0.00018951301171910018, 0.00027280626818537712, 0.00041818697354756296, 0.0001538953511044383, 0.00012183390208519995, 0.00012795149814337492, 0.00021008384646847844, 0.00016360211884602904, 0.00028169539291411638, 0.0019931856077164412, 0.00040004393667913973, 0.00016622651310171932, 0.00017577792459633201, 0.00017713768465910107, 0.00014925816503819078, 0.00030361564131453633, 0.000191135099157691, 0.00040873014950193465, 0.00010262223804602399, 6.6747481469064951e-05, 0.00017216819105669856, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 6,-45,7,5,-17,-106,-37,49,-33,-4,-1,8,44,-5,-14,4,103,15,22,3,-3,-20,-76,19,-9,-14,1,-24,-61,70,-15,-116,46,-4,-48,-59,-9,-34,12,-16,-19,37,13,6,-10,67,127,-27, -127,-98,-25,127,-65,77,-91,127,33,13,19,-3,50,17,-2,-43,-29,61,25,10,5,127,8,127,127,-28,-40,42,68,-126,-8,-75,62,-1,-36,-126,26,8,-52,-56,-127,-4,-89,-127,36,56,52,113, -16,-6,9,7,-24,31,41,47,13,-39,4,2,-23,1,-4,6,-57,36,-70,-27,-8,-26,127,23,-61,5,14,-3,17,36,8,17,-6,-12,-33,75,8,2,19,68,22,-21,30,-33,-6,37,-27,-15, 
  /* [0][1][][] */ -14,-18,-30,-2,31,-115,127,-84,-16,11,22,40,127,16,-2,-34,-26,-27,28,41,60,-63,44,11,-69,127,-75,-23,127,-95,48,-127,-45,2,-82,17,10,-60,-39,4,114,127,13,-126,-62,-59,-1,81, 92,-127,127,-1,127,71,-65,-53,28,127,127,-127,-97,127,127,127,127,127,121,127,127,119,3,3,117,-97,-127,126,39,127,127,-6,-127,127,127,127,-127,127,-127,-127,37,36,-127,-35,127,-127,-9,81, 19,31,-42,-6,-51,127,-111,86,111,-79,17,67,-39,13,10,-66,19,10,-127,14,20,-109,-36,-2,72,-11,-22,127,-73,-34,22,-37,-31,18,97,-26,39,-5,-1,-91,106,-1,33,50,-55,85,102,-86, 
  /* [0][2][][] */ -4,27,5,-32,0,-72,-12,-3,1,0,4,6,-15,-16,-4,-3,-55,20,13,-39,0,-20,88,-11,-116,5,45,-24,13,3,5,38,-11,-12,-72,34,0,-10,21,45,-29,-4,13,10,-17,15,-11,8, 38,-16,-37,-37,27,34,118,-96,127,-35,1,9,-72,-25,-24,-73,-22,113,8,24,12,33,-22,-33,-82,59,83,-2,-92,17,-29,-16,-23,-2,-43,6,56,-22,2,116,-117,-3,-7,63,35,49,11,-127, -8,30,3,-22,-16,-5,-3,-48,-30,-25,-9,7,19,-14,-13,13,45,43,-25,-19,-3,-19,-48,-15,25,-23,29,-12,-16,6,-10,12,32,-14,-30,-52,-6,7,30,13,-12,-16,8,18,-14,11,67,-55, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011452862061560154, 0.0068420311436057091, 0.030361885204911232, 0.0096120946109294891, 0.0091631142422556877, 0.011651867069303989, 0.010293950326740742, 0.013280356302857399, 0.0041954456828534603, 0.012888441793620586, 0.0087821846827864647, 0.053759608417749405, 0.01933794841170311, 0.025018040090799332, 0.016706166788935661, 0.024782257154583931, 0.0062861582264304161, 0.0029560788534581661, 0.0096417143940925598, 0.013170978054404259, 0.010722269304096699, 0.009469304233789444, 0.0038162420969456434, 0.019326550886034966, 0.0068541639484465122, 0.015600081533193588, 0.020690837875008583, 0.0080543030053377151, 0.011594265699386597, 0.017772946506738663, 0.0065405522473156452, 0.0051779407076537609, 0.0054379384964704514, 0.0089285634458065033, 0.006953089963644743, 0.011972053907811642, 0.084710381925106049, 0.017001867294311523, 0.0070646265521645546, 0.0074705616571009159, 0.0075283516198396683, 0.0063434718176722527, 0.012903664261102676, 0.0081232413649559021, 0.017371030524373055, 0.0043614450842142105, 0.0028367680497467518, 0.0073171481490135193, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3933, 5988, 19144, 2747, 3703, -2198, 7363, 18089, 5572, -1328, 5499, -3149, 28415, -2383, 2683, 23234, -439, 2905, 174, 3979, 5497, 4618, 766, 45462, 8789, 5117, 18473, 2447, 8631, 8389, 817, 1469, 1453, 2291, -361, 331, -4020, -769, 3519, 3403, 6136, 3516, 5465, 5915, 7401, 4924, 2371, 8843, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00015077566786203533, 0.00013514290913008153, 5.0127997383242473e-05, 0.00011188765347469598, 0.00013961877266410738, 0.00018171255942434072, 0.00010703340376494452, 5.2788931498071179e-05, 0.0001000794509309344, 0.00015520412125624716, 0.00015052928938530385, 0.00015894549142103642, 3.4865264751715586e-05, 0.00017670996021479368, 0.00017814339662436396, 4.4677792175207287e-05, 0.00023318134481087327, 0.00015500019071623683, 0.00019641297694761306, 0.00015549626550637186, 0.00013098864292260259, 0.00015824039292056113, 0.00025398549041710794, 2.4490729629178531e-05, 9.5860355941113085e-05, 0.00011216855637030676, 5.4543590522371233e-05, 0.00017093797214329243, 9.1583198809530586e-05, 9.2042690084781498e-05, 0.00033782090758904815, 0.00028532490250654519, 0.00013273078366182745, 0.00016890661208890378, 0.00018239552446175367, 0.00020192947704344988, 0.00014443641703110188, 0.00018363026902079582, 0.00016708434850443155, 0.00015545850328635424, 0.00012970803072676063, 0.00014597416156902909, 0.00014983941218815744, 0.00013533919991459697, 9.8087148217018694e-05, 0.00014581267896573991, 0.00026529529714025557, 9.1724403318949044e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-73,-82,16,80,11,70, 
  /* [1][0][][] */ 53,-76,46,-127,-52,70,-79,-38, 
  /* [2][0][][] */ -33,127,123,49,112,2,56,8, 
  /* [3][0][][] */ 108,42,-95,64,-9,-102,-127,-39, 
  /* [4][0][][] */ -43,31,16,-70,-32,107,127,51, 
  /* [5][0][][] */ 27,80,-127,-72,47,84,32,-30, 
  /* [6][0][][] */ -8,127,59,60,71,7,13,-90, 
  /* [7][0][][] */ 127,-24,-38,26,20,3,113,13, 
  /* [8][0][][] */ 55,127,69,90,123,88,104,-85, 
  /* [9][0][][] */ 49,120,-127,-86,17,94,4,74, 
  /* [10][0][][] */ -72,-45,21,-52,-7,-27,-48,127, 
  /* [11][0][][] */ 18,-115,-127,-20,24,-13,41,-7, 
  /* [12][0][][] */ -29,-108,-125,-31,-127,36,-67,53, 
  /* [13][0][][] */ -8,7,-101,100,-127,-23,3,-20, 
  /* [14][0][][] */ -67,-43,-127,-8,34,1,-13,-62, 
  /* [15][0][][] */ 19,-101,-127,12,-95,-25,-29,-13, 
  /* [16][0][][] */ 127,-65,-17,71,-83,27,32,105, 
  /* [17][0][][] */ -25,120,127,-25,-53,-12,-30,-20, 
  /* [18][0][][] */ 12,-127,49,73,0,-68,50,-82, 
  /* [19][0][][] */ 127,-44,-60,36,-104,10,42,106, 
  /* [20][0][][] */ -27,-127,84,77,-16,-91,-3,-74, 
  /* [21][0][][] */ -3,-46,-13,-35,127,-3,46,21, 
  /* [22][0][][] */ -127,28,-74,51,45,52,-88,-108, 
  /* [23][0][][] */ -92,-44,67,1,-99,127,122,-44, 
  /* [24][0][][] */ -28,63,0,-40,-38,127,122,6, 
  /* [25][0][][] */ -52,-108,-127,-58,-55,-19,-27,-43, 
  /* [26][0][][] */ -14,66,-12,127,-86,31,-54,3, 
  /* [27][0][][] */ 19,-127,32,81,13,-58,3,-127, 
  /* [28][0][][] */ 21,127,62,44,110,-19,26,-64, 
  /* [29][0][][] */ 96,29,-33,-3,82,-127,-99,39, 
  /* [30][0][][] */ 21,-10,30,-127,15,-21,18,-21, 
  /* [31][0][][] */ 46,-41,5,67,-15,34,14,127, 
  /* [32][0][][] */ -93,-72,13,-61,-67,127,68,96, 
  /* [33][0][][] */ -31,40,43,-41,35,127,-106,68, 
  /* [34][0][][] */ 32,127,-72,-46,20,49,-68,59, 
  /* [35][0][][] */ 9,-127,33,59,-24,-64,38,-80, 
  /* [36][0][][] */ -19,-32,-73,-11,-127,-52,-16,13, 
  /* [37][0][][] */ -50,-127,78,90,-45,-96,-15,-49, 
  /* [38][0][][] */ -75,23,64,-74,-127,-92,-65,89, 
  /* [39][0][][] */ 76,-127,87,55,-6,-83,-17,-88, 
  /* [40][0][][] */ 3,58,19,46,-127,-14,-62,18, 
  /* [41][0][][] */ 110,127,-77,-107,52,20,-7,16, 
  /* [42][0][][] */ -8,-42,-19,11,127,14,46,18, 
  /* [43][0][][] */ 127,26,79,23,-68,-27,61,106, 
  /* [44][0][][] */ 73,44,-21,18,76,-121,-127,20, 
  /* [45][0][][] */ 45,15,21,20,77,-127,-3,-48, 
  /* [46][0][][] */ 54,-34,-6,127,36,54,18,70, 
  /* [47][0][][] */ -84,-78,48,69,-52,19,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030516432598233223, 0.0027352420147508383, 0.0010145719861611724, 0.0022645643912255764, 0.0028258317615836859, 0.0036777942441403866, 0.0021663161460310221, 0.0010684282751753926, 0.0020255707204341888, 0.0031412735115736723, 0.0030466567259281874, 0.0032169974874705076, 0.00070565997157245874, 0.0035765436477959156, 0.0036055557429790497, 0.00090426183305680752, 0.0047195032238960266, 0.0031371458899229765, 0.0039753252640366554, 0.003147186478599906, 0.0026511612813919783, 0.0032027263659983873, 0.0051405713893473148, 0.00049568322720006108, 0.0019401778699830174, 0.0022702496498823166, 0.0011039419332519174, 0.0034597206395119429, 0.0018536098068580031, 0.0018629096448421478, 0.006837368942797184, 0.0057748695835471153, 0.0026864216197282076, 0.0034186067059636116, 0.0036916173994541168, 0.0040869773365557194, 0.0029233391396701336, 0.0037166080437600613, 0.0033817249350249767, 0.0031464220955967903, 0.0026252421084791422, 0.002954462543129921, 0.0030326938722282648, 0.0027392148040235043, 0.0019852472469210625, 0.0029511942993849516, 0.0053694779053330421, 0.0018564676865935326, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7555, 14876, -4559, 8069, -594, 4188, -12058, -18683, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023430628061760217, 0.00012285316188354045, 0.00013408827362582088, 0.00014680765161756426, 0.00019081537902820855, 0.00016519454948138446, 0.00024844618747010827, 0.00014491713955067098, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-5,34,13,-32,-13,10,7,-44,-7,-65,-58,-25,-63,-12,-29,47,-42,40,41,-18,30,-40,16,-1,-40,56,-16,-3,-17,17,9,82,37,37,-127,17,0,-15,-36,3,-15,43,49,37,6,29,4, 
  /* [1][0][][] */ -2,41,62,-27,-12,41,-50,-28,1,24,-14,-90,10,85,-16,60,-21,18,-27,-55,12,-79,-24,21,-69,-14,-1,-110,-26,-18,31,-51,49,75,-39,2,127,-28,4,49,-32,38,-82,-31,111,-21,-32,-26, 
  /* [2][0][][] */ -6,-18,-61,12,-1,43,27,5,-10,44,-1,28,66,-93,19,-63,37,-86,21,34,-22,52,-3,24,-15,62,-25,-67,17,5,21,-69,-43,-86,34,-32,104,20,-11,-56,0,27,80,26,127,14,21,24, 
  /* [3][0][][] */ -4,23,-68,44,12,-37,-70,-105,12,-21,-39,-2,2,26,32,81,-9,13,-38,27,3,-101,27,-57,-76,-11,127,-15,-46,0,-66,16,-2,-83,9,-12,-19,-41,-21,102,-45,-36,-3,21,38,2,-41,45, 
  /* [4][0][][] */ -27,-44,-6,8,30,-30,-13,-7,27,-31,56,-79,4,28,7,8,-17,-22,12,-12,-5,-51,4,-19,17,-11,39,49,31,20,-16,30,-10,-2,1,0,-71,85,36,-24,31,-21,-22,-25,-79,11,127,9, 
  /* [5][0][][] */ 43,-22,1,15,26,-40,34,-127,27,-27,-12,116,-79,67,20,-64,-2,-90,14,5,-37,63,-37,-45,-61,73,-26,1,-24,46,-41,-35,25,51,31,-4,-39,-7,-44,-43,18,-37,-48,-7,-33,57,88,21, 
  /* [6][0][][] */ 52,-21,22,-10,-35,-18,-35,18,-40,7,-41,127,-42,-35,-5,57,12,45,15,33,36,-81,-21,19,22,38,-64,5,8,-41,14,37,7,17,-16,-1,13,1,-2,-5,-7,-15,40,58,-2,-36,73,-13, 
  /* [7][0][][] */ -25,6,-5,64,32,34,5,32,22,4,71,-3,124,110,62,49,44,50,-16,1,24,-19,-87,-28,17,-3,-31,67,34,-26,-36,-16,39,8,42,-99,-78,37,38,58,-34,33,85,127,-62,-26,-112,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0099580166861414909, 0.0052212593145668507, 0.0056987516582012177, 0.0062393252737820148, 0.0081096533685922623, 0.0070207682438194752, 0.010558962821960449, 0.0061589782126247883, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13000, 4627, 4780, -629, 1506, -1779, -135, 32035, -704, 1969, 6560, 56616, 1854, 3465, 86, 12797, -948, 12861, -353, 7609, 12414, 182, 3351, -9836, 10239, 763, 1393, 14499, -632, -1493, -9644, 10757, 4405, 2355, -98, 5448, -9232, 9687, -396, 19067, -391, -877, 5173, 1794, 137, -396, 1543, -678, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.1837897596415132e-05, 8.4548308223020285e-05, 0.00016551482258364558, 0.00016527350817341357, 0.0006715042982250452, 0.00016672033234499395, 0.00013784681505057961, 0.00010673153155948967, 0.00011641607125056908, 8.41621367726475e-05, 7.1053786086849868e-05, 5.4142696171766147e-05, 8.7556960352230817e-05, 6.6291737311985344e-05, 0.00024016377574298531, 0.0001484905369579792, 0.0001222043065354228, 0.00035649104393087327, 0.00014675037527922541, 0.00015458207053598017, 9.9907818366773427e-05, 0.00038601853884756565, 0.00012409032206051052, 0.00025698950048536062, 0.00015223213995341212, 8.5854830103926361e-05, 6.0243954067118466e-05, 9.2560338089242578e-05, 0.00015380916011054069, 0.00087677349802106619, 0.00025106832617893815, 8.425240230280906e-05, 9.7467360319569707e-05, 0.00014468334848061204, 0.00015595604781992733, 5.7226377975894138e-05, 9.6348907391075045e-05, 4.8033351049525663e-05, 0.00010526982805458829, 6.5320193243678659e-05, 0.0001441577187506482, 0.00015827994502615184, 7.0849739131517708e-05, 8.4537161455955356e-05, 8.5987812781240791e-05, 0.00032798919710330665, 6.9570654886774719e-05, 0.00020619423594325781, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -51,-102,-9,-17,127,-49,62,-62,-86,-83,-20,-45,110,33,59,-127,64,-24,7,-44,-84,104,0,16,-15,83,56,-36,83,-67,9,-45,-99,-86,45,65,24,76,112,-69,-125,-18,37,69,51,-127,85,89, -58,-125,-77,52,-91,107,52,-65,-67,43,83,-112,127,91,101,-82,-83,-77,37,-56,-86,93,-68,117,-86,112,84,-125,100,-48,10,-123,-44,-91,74,119,111,111,127,-62,-127,-63,71,82,80,106,91,81, 9,-52,-67,91,-51,-23,18,-9,94,24,60,-76,19,53,-43,-10,-85,-17,35,-35,-34,19,-78,3,-78,49,14,-91,38,55,122,-68,20,16,-13,45,72,68,43,0,-23,95,65,26,38,29,17,-117, 
  /* [0][1][][] */ -119,-96,-12,-71,-88,-66,101,-113,-127,-127,82,-71,85,44,-126,-77,127,-127,-60,-75,-87,118,-45,12,-10,99,107,-50,-104,-76,-3,-47,-89,-127,-127,64,41,90,2,-96,55,-19,75,112,83,105,123,-127, -127,-127,-127,-98,-33,127,127,-127,96,64,127,-127,103,127,60,-120,53,-93,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-9,-127,-127,-111,47,127,127,127,-19,-127,93,-96,127,127,127,-5,127,121, -47,-61,-126,127,73,-39,49,-29,72,24,18,-61,8,64,73,-62,-22,0,-14,-72,-68,17,-78,-11,-120,47,25,-85,-49,38,127,-81,-61,15,59,77,78,72,-32,-36,41,127,74,16,49,-50,23,27, 
  /* [0][2][][] */ -110,-22,26,24,-48,-22,22,-49,30,-45,13,-34,1,18,-48,-20,-81,-23,99,-28,-12,26,-60,-9,-1,56,73,-11,40,56,-3,-1,8,-82,-42,41,12,9,-66,-45,20,-7,34,36,25,50,17,-62, -89,-31,-30,-66,89,43,59,-63,101,21,-43,-57,-4,41,-127,-84,38,7,52,-63,-40,19,-57,54,-65,59,75,-31,42,5,-22,-31,-63,-23,-65,58,28,14,-114,-69,24,-43,75,71,39,-109,25,8, -31,-21,-49,-16,-25,-8,19,-26,-68,10,-19,-13,-12,11,32,-34,35,35,2,-45,-42,-13,-14,-23,-58,2,22,-19,13,-60,53,-20,-86,25,21,45,18,15,-61,-31,1,45,20,21,15,-7,7,43, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034781105350703001, 0.0035933030303567648, 0.0070343795232474804, 0.0070241237990558147, 0.028538931161165237, 0.0070856139063835144, 0.005858489777892828, 0.0045360899530351162, 0.0049476828426122665, 0.0035768907982856035, 0.0030197859741747379, 0.0023010645527392626, 0.0037211708258837461, 0.0028173986356705427, 0.010206960141658783, 0.0063108475878834724, 0.0051936828531324863, 0.015150869265198708, 0.00623689079657197, 0.0065697375684976578, 0.0042460821568965912, 0.016405787318944931, 0.0052738385275006294, 0.010922053828835487, 0.006469865795224905, 0.0036488303449004889, 0.0025603680405765772, 0.0039338143542408943, 0.0065368888899683952, 0.037262871861457825, 0.010670403949916363, 0.0035807271488010883, 0.0041423626244068146, 0.0061490419320762157, 0.0066281319595873356, 0.0024321209639310837, 0.0040948283858597279, 0.0020414174068719149, 0.0044739674776792526, 0.0027761082164943218, 0.0061267032288014889, 0.0067268977873027325, 0.0030111137311905622, 0.0035928292199969292, 0.0036544820759445429, 0.013939540833234787, 0.0029567528981715441, 0.0087632546201348305, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1722, -715, -597, 1691, 22920, 2666, -733, 6460, 2191, 1751, 457, 4231, 1541, 802, -1619, 579, 4493, 15047, 4672, -1045, 1578, -2003, -151, 3134, -333, -1035, 2300, -68, 4761, 24619, 3029, -28, 707, -132, 3698, 38, 582, -261, 1801, 1638, 2592, 3035, 234, -422, 1015, 3433, 1949, -359, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030364390113390982, 0.00027449955814518034, 0.00019169441657140851, 0.00022655320935882628, 4.3427604396129027e-05, 0.0002266269875690341, 0.00035123201087117195, 0.0001400566688971594, 0.00019352513481862843, 0.00037386937765404582, 0.00019755438552238047, 0.00021061369625385851, 0.00016014360880944878, 0.00025286205345764756, 0.00017975991067942232, 0.00022499758051708341, 0.00016264661098830402, 6.1302707763388753e-05, 0.00016114818572532386, 0.00023568108736071736, 0.0002709707769099623, 0.00012893859820906073, 0.00030682820943184197, 0.00024287615087814629, 0.00036294973688200116, 0.00050378940068185329, 0.00022107383119873703, 0.00065865361830219626, 0.00016706985479686409, 4.0158920455724001e-05, 0.00024366866273339838, 0.00057160365395247936, 0.00026578639517538249, 0.00027037868858315051, 0.00019513709412422031, 0.00022788411297369748, 0.00031508342362940311, 0.00039980781730264425, 0.00024962000316008925, 0.00035509746521711349, 0.00021881572320125997, 0.00021712723537348211, 0.00022691307822242379, 0.00031268957536667585, 0.00029386603273451328, 0.00014878604270052165, 0.00018218491459265351, 0.00021449659834615886, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -42,27,5,-18,-85,-39,-127,30, 
  /* [1][0][][] */ 81,-78,-59,-57,127,-85,100,26, 
  /* [2][0][][] */ -100,124,-46,-127,54,-23,-30,39, 
  /* [3][0][][] */ 48,26,93,4,99,114,127,-17, 
  /* [4][0][][] */ -76,-127,66,9,-61,-116,6,-35, 
  /* [5][0][][] */ 127,-27,64,63,-73,-12,-2,-20, 
  /* [6][0][][] */ 25,33,127,-26,42,-35,-44,30, 
  /* [7][0][][] */ 30,9,-127,-33,-40,103,102,-75, 
  /* [8][0][][] */ -2,127,-33,9,67,113,45,60, 
  /* [9][0][][] */ -12,127,-68,83,20,-114,48,114, 
  /* [10][0][][] */ 4,-127,-2,-31,-77,-126,-60,-86, 
  /* [11][0][][] */ -127,-77,105,47,-8,-65,96,61, 
  /* [12][0][][] */ -26,39,-127,77,31,-57,-74,93, 
  /* [13][0][][] */ 90,-127,92,79,9,33,39,-61, 
  /* [14][0][][] */ -30,100,-35,-127,-31,-118,-26,-67, 
  /* [15][0][][] */ 41,115,30,-18,37,-67,95,-127, 
  /* [16][0][][] */ -111,-127,-57,94,-54,27,-19,80, 
  /* [17][0][][] */ -26,-108,-127,88,-61,76,-54,77, 
  /* [18][0][][] */ -97,-74,-51,93,-10,72,-4,127, 
  /* [19][0][][] */ 59,-120,99,-127,11,-69,28,-33, 
  /* [20][0][][] */ -5,71,30,16,39,127,73,-7, 
  /* [21][0][][] */ 26,117,44,-32,39,-70,96,-127, 
  /* [22][0][][] */ 20,10,106,20,-12,127,33,-38, 
  /* [23][0][][] */ -102,-62,31,-74,84,92,-63,-127, 
  /* [24][0][][] */ -93,-92,34,-81,109,110,-49,-127, 
  /* [25][0][][] */ 127,11,-60,-13,15,32,-62,-10, 
  /* [26][0][][] */ -127,-37,-121,-22,-53,-26,22,0, 
  /* [27][0][][] */ 80,30,-4,-56,-127,-25,83,91, 
  /* [28][0][][] */ -127,-91,8,49,-78,-109,4,-3, 
  /* [29][0][][] */ 119,99,42,-127,31,9,-67,-90, 
  /* [30][0][][] */ -90,-62,39,-71,69,83,-54,-127, 
  /* [31][0][][] */ 49,46,-4,127,3,-76,5,7, 
  /* [32][0][][] */ -26,127,-6,34,25,66,-18,46, 
  /* [33][0][][] */ -33,127,-72,24,24,-34,-25,-2, 
  /* [34][0][][] */ -127,-114,-54,111,-10,16,24,102, 
  /* [35][0][][] */ -52,127,-31,-6,71,103,54,67, 
  /* [36][0][][] */ 72,29,-2,-45,-127,-32,102,113, 
  /* [37][0][][] */ -68,114,30,20,-127,106,-27,-101, 
  /* [38][0][][] */ 32,33,26,26,127,76,101,58, 
  /* [39][0][][] */ -26,-68,35,-21,8,36,-96,127, 
  /* [40][0][][] */ -75,-54,-75,127,-26,3,15,72, 
  /* [41][0][][] */ 127,9,58,100,-49,-12,-7,-18, 
  /* [42][0][][] */ -42,6,-74,-127,53,-109,2,83, 
  /* [43][0][][] */ 27,-6,89,-6,37,127,93,5, 
  /* [44][0][][] */ -28,-28,-69,127,45,8,-42,-42, 
  /* [45][0][][] */ 74,127,118,-118,55,-59,25,-120, 
  /* [46][0][][] */ -37,-125,-41,36,-6,43,-65,127, 
  /* [47][0][][] */ 37,51,127,-2,102,124,127,-25, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045709731057286263, 0.0041322419419884682, 0.0028857158031314611, 0.0034104706719517708, 0.00065374741097912192, 0.0034115812741219997, 0.0052873515523970127, 0.002108375309035182, 0.0029132750350981951, 0.0056281285360455513, 0.002973930211737752, 0.0031705216970294714, 0.0024107585195451975, 0.0038065167609602213, 0.002706057159230113, 0.0033870527986437082, 0.0024484382010996342, 0.00092283438425511122, 0.00242588110268116, 0.0035478794015944004, 0.0040791206993162632, 0.0019410067470744252, 0.0046189087443053722, 0.0036561919841915369, 0.0054637473076581955, 0.0075839096680283546, 0.0033279857598245144, 0.0099151935428380966, 0.0025150245055556297, 0.00060454150661826134, 0.0036681222263723612, 0.0086047668009996414, 0.0040010763332247734, 0.0040702074766159058, 0.0029375411104410887, 0.0034305057488381863, 0.0047431807033717632, 0.0060185985639691353, 0.0037577119655907154, 0.0053455410525202751, 0.0032939927186816931, 0.0032685745973140001, 0.003415888175368309, 0.0047071441076695919, 0.0044237799011170864, 0.002239784924313426, 0.0027425624430179596, 0.0032289738301187754, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7338, -2967, 11794, -9852, 23455, 7581, -9259, 11143, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017896979989018291, 0.0002099360863212496, 0.00017747703532222658, 0.00023084791610017419, 0.00018596138397697359, 0.00015478744171559811, 0.00016886109369806945, 0.00026375797460786998, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-12,-17,-68,-24,-33,18,-20,39,9,-31,-4,111,127,-18,-106, 
  /* [1][0][][] */ 127,-61,-41,15,-48,74,-68,-43,-40,87,-36,-54,-10,4,-64,-18, 
  /* [2][0][][] */ -37,-96,41,42,44,-54,-74,-19,28,-88,25,-127,43,-23,-73,21, 
  /* [3][0][][] */ 36,12,14,18,-11,66,-53,-19,127,44,10,21,4,-13,11,24, 
  /* [4][0][][] */ -98,-39,-28,-127,-9,39,57,-117,31,-17,-50,-40,-124,34,-41,-22, 
  /* [5][0][][] */ 88,49,67,-25,45,-47,-127,-124,-17,-75,65,47,-58,50,62,-45, 
  /* [6][0][][] */ 110,42,-126,-82,28,-74,6,-95,-44,22,-127,98,93,-93,8,74, 
  /* [7][0][][] */ -127,-2,98,-29,-63,2,-2,-62,-50,60,85,-31,62,-25,31,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0076062162406742573, 0.0089222835376858711, 0.0075427736155688763, 0.0098110362887382507, 0.0079033588990569115, 0.0065784663893282413, 0.0071765962056815624, 0.011209714226424694, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 23088, -865, -344, 3386, -1091, 333, 10350, 1588, -125, 117, -2343, 2396, 1683, -748, -470, -996, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010007333185058087, 0.00020741067419294268, 0.00015979149611666799, 0.00016820667951833457, 0.0010833886917680502, 0.00086299754912033677, 0.00015905684267636389, 0.0007850137772038579, 0.00028206201386637986, 0.0011957123642787337, 0.00020849620341323316, 0.00021395747899077833, 9.538137965137139e-05, 0.00023949188471306115, 0.00020823765953537077, 0.00065658451057970524, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 3,-4,6,3,-18,11,6,15,-6,-11,0,-7,-1,-7,-1,-1, 6,-4,3,3,14,-2,11,-27,-9,9,-5,84,-8,21,4,0, 3,-4,-4,2,3,-14,-3,10,1,2,-3,-8,3,-4,-3,-1, 
  /* [0][1][][] */ 14,-9,3,3,127,-24,-127,-22,127,127,1,-4,110,-23,-3,-19, -127,127,127,-1,-86,-92,-15,-103,17,-105,127,127,127,127,127,127, 19,-3,-6,0,-9,127,2,-11,-2,-12,-3,-3,11,-3,-13,-8, 
  /* [0][2][][] */ 0,-2,-2,-16,-17,15,52,6,-9,-7,-1,1,-7,2,-4,-12, 22,-13,-6,-127,7,-16,-9,127,-4,2,4,-13,-9,-56,-7,-37, 3,-2,-5,-4,2,-5,0,-3,1,2,-1,2,0,-4,-6,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0042531164363026619, 0.0088149532675743103, 0.0067911385558545589, 0.0071487836539745331, 0.046044018119573593, 0.036677394062280655, 0.006759915966540575, 0.033363085240125656, 0.011987634934484959, 0.050817776471376419, 0.0088610881939530373, 0.0090931924059987068, 0.0040537086315453053, 0.010178404860198498, 0.0088501004502177238, 0.027904842048883438, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 2008, 812, -28, 878, 69480, 59154, 6949, 21919, 6177, 16832, 1378, 122, 7887, 18828, 552, 27404, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00014915625797584653, 0.000436866917880252, 0.00020402067457325757, 0.00011830584844574332, 1.8794136849464849e-05, 2.3310189135372639e-05, 0.0001016974711092189, 2.1261577785480767e-05, 0.00013077713083475828, 2.7650268748402596e-05, 0.00030188175151124597, 0.00034104095539078116, 0.00022466626251116395, 1.347780016658362e-05, 0.00033292101579718292, 2.8789638236048631e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 67, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 104, -95, -11, 
  /* [1][1][][] */ -127, 103, 22, 
  /* [1][2][][] */ 13, -2, -14, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -93, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 30, -56, -2, 
  /* [4][1][][] */ 29, -127, 0, 
  /* [4][2][][] */ 13, -88, -14, 
  /* [5][0][][] */ -63, 26, -3, 
  /* [5][1][][] */ -127, 30, 1, 
  /* [5][2][][] */ -84, 23, -2, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 36, 25, -19, 
  /* [7][1][][] */ 127, 70, -7, 
  /* [7][2][][] */ 34, 6, -23, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -21, 53, -8, 
  /* [9][1][][] */ -14, 127, -10, 
  /* [9][2][][] */ -7, 87, -5, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -79, 78, 4, 
  /* [13][0][][] */ 82, 27, -9, 
  /* [13][1][][] */ 127, 100, -14, 
  /* [13][2][][] */ 70, 99, 31, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 43, 97, -127, 
  /* [14][2][][] */ -17, -70, 80, 
  /* [15][0][][] */ -86, -28, 17, 
  /* [15][1][][] */ -127, -124, 14, 
  /* [15][2][][] */ -19, -69, -6, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.038034845143556595, 0.11140105873346329, 0.052025269716978073, 0.030167989432811737, 0.0047925044782459736, 0.0059440978802740574, 0.025932854041457176, 0.0054217018187046051, 0.033348165452480316, 0.0070508182980120182, 0.076979845762252808, 0.086965441703796387, 0.057289894670248032, 0.0034368387423455715, 0.084894850850105286, 0.0073413574136793613, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.066428720951080322, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.049408026039600372, } };
const TfArray<1, int> quant50_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.044527757912874222, } };
const TfArray<1, int> quant53_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.065237157046794891, } };
const TfArray<1, int> quant54_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.019749579951167107, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.042546141892671585, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.01728411577641964, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.051478315144777298, } };
const TfArray<1, int> quant61_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.05200398713350296, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.020321100950241089, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.030713099986314774, } };
const TfArray<1, int> quant65_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0645575150847435, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.018300127238035202, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.018820922821760178, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.029549825936555862, } };
const TfArray<1, int> quant69_zero = { 1, { -76 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
